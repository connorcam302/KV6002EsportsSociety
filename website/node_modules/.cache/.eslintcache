[{"C:\\Users\\Connor\\Documents\\School\\University\\Third Year\\Team Project\\KV6002EsportsSociety\\website\\src\\index.js":"1","C:\\Users\\Connor\\Documents\\School\\University\\Third Year\\Team Project\\KV6002EsportsSociety\\website\\src\\reportWebVitals.js":"2","C:\\Users\\Connor\\Documents\\School\\University\\Third Year\\Team Project\\KV6002EsportsSociety\\website\\src\\App.js":"3","C:\\Users\\Connor\\Documents\\School\\University\\Third Year\\Team Project\\KV6002EsportsSociety\\website\\src\\components\\Navbar.js":"4","C:\\Users\\Connor\\Documents\\School\\University\\Third Year\\Team Project\\KV6002EsportsSociety\\website\\src\\components\\ErrorPage.js":"5","C:\\Users\\Connor\\Documents\\School\\University\\Third Year\\Team Project\\KV6002EsportsSociety\\website\\src\\components\\TeamPage.js":"6","C:\\Users\\Connor\\Documents\\School\\University\\Third Year\\Team Project\\KV6002EsportsSociety\\website\\src\\components\\Router.js":"7","C:\\Users\\Connor\\Documents\\School\\University\\Third Year\\Team Project\\KV6002EsportsSociety\\website\\src\\components\\LoginRegisterPage.js":"8","C:\\Users\\Connor\\Documents\\School\\University\\Third Year\\Team Project\\KV6002EsportsSociety\\website\\src\\components\\AdminPage.js":"9","C:\\Users\\Connor\\Documents\\School\\University\\Third Year\\Team Project\\KV6002EsportsSociety\\website\\src\\components\\AdminFormJoinTeamApplication.js":"10","C:\\Users\\Connor\\Documents\\School\\University\\Third Year\\Team Project\\KV6002EsportsSociety\\website\\src\\components\\AdminFormTeamApplication.js":"11","C:\\Users\\Connor\\Documents\\School\\University\\Third Year\\Team Project\\KV6002EsportsSociety\\website\\src\\components\\AdminFormWeeklyEvents.js":"12","C:\\Users\\Connor\\Documents\\School\\University\\Third Year\\Team Project\\KV6002EsportsSociety\\website\\src\\components\\AdminButtons.js":"13","C:\\Users\\Connor\\Documents\\School\\University\\Third Year\\Team Project\\KV6002EsportsSociety\\website\\src\\components\\AdminFormTeamAccolades.js":"14","C:\\Users\\Connor\\Documents\\School\\University\\Third Year\\Team Project\\KV6002EsportsSociety\\website\\src\\components\\TeamPlayers.js":"15","C:\\Users\\Connor\\Documents\\School\\University\\Third Year\\Team Project\\KV6002EsportsSociety\\website\\src\\components\\TeamStats.js":"16","C:\\Users\\Connor\\Documents\\School\\University\\Third Year\\Team Project\\KV6002EsportsSociety\\website\\src\\components\\TeamResults.js":"17","C:\\Users\\Connor\\Documents\\School\\University\\Third Year\\Team Project\\KV6002EsportsSociety\\website\\src\\components\\FormLogin.js":"18","C:\\Users\\Connor\\Documents\\School\\University\\Third Year\\Team Project\\KV6002EsportsSociety\\website\\src\\components\\TeamAccolades.js":"19","C:\\Users\\Connor\\Documents\\School\\University\\Third Year\\Team Project\\KV6002EsportsSociety\\website\\src\\components\\EditTeamPage.js":"20","C:\\Users\\Connor\\Documents\\School\\University\\Third Year\\Team Project\\KV6002EsportsSociety\\website\\src\\components\\PlayerPage.js":"21","C:\\Users\\Connor\\Documents\\School\\University\\Third Year\\Team Project\\KV6002EsportsSociety\\website\\src\\components\\EditPlayerPage.js":"22","C:\\Users\\Connor\\Documents\\School\\University\\Third Year\\Team Project\\KV6002EsportsSociety\\website\\src\\components\\ResultsPage.js":"23","C:\\Users\\Connor\\Documents\\School\\University\\Third Year\\Team Project\\KV6002EsportsSociety\\website\\src\\components\\AllTeamsPage.js":"24","C:\\Users\\Connor\\Documents\\School\\University\\Third Year\\Team Project\\KV6002EsportsSociety\\website\\src\\components\\FormRegister.js":"25","C:\\Users\\Connor\\Documents\\School\\University\\Third Year\\Team Project\\KV6002EsportsSociety\\website\\src\\components\\PlayerStats.js":"26","C:\\Users\\Connor\\Documents\\School\\University\\Third Year\\Team Project\\KV6002EsportsSociety\\website\\src\\components\\EditTeamForm.js":"27","C:\\Users\\Connor\\Documents\\School\\University\\Third Year\\Team Project\\KV6002EsportsSociety\\website\\src\\components\\PlayerResults.js":"28","C:\\Users\\Connor\\Documents\\School\\University\\Third Year\\Team Project\\KV6002EsportsSociety\\website\\src\\components\\PlayerTeams.js":"29","C:\\Users\\Connor\\Documents\\School\\University\\Third Year\\Team Project\\KV6002EsportsSociety\\website\\src\\components\\SearchBox.js":"30","C:\\Users\\Connor\\Documents\\School\\University\\Third Year\\Team Project\\KV6002EsportsSociety\\website\\src\\components\\PlayerAccolades.js":"31","C:\\Users\\Connor\\Documents\\School\\University\\Third Year\\Team Project\\KV6002EsportsSociety\\website\\src\\components\\EditPlayerForm.js":"32","C:\\Users\\Connor\\Documents\\School\\University\\Third Year\\Team Project\\KV6002EsportsSociety\\website\\src\\components\\AdminFormTeamApplicationDetails.js":"33","C:\\Users\\Connor\\Documents\\School\\University\\Third Year\\Team Project\\KV6002EsportsSociety\\website\\src\\components\\Teams.js":"34","C:\\Users\\Connor\\Documents\\School\\University\\Third Year\\Team Project\\KV6002EsportsSociety\\website\\src\\components\\JoinTeamSubmissionForm.js":"35","C:\\Users\\Connor\\Documents\\School\\University\\Third Year\\Team Project\\KV6002EsportsSociety\\website\\src\\components\\TeamSubmissionForm.js":"36","C:\\Users\\Connor\\Documents\\School\\University\\Third Year\\Team Project\\KV6002EsportsSociety\\website\\src\\components\\AdminFormJoinTeamDetails.js":"37","C:\\Users\\Connor\\Documents\\School\\University\\Third Year\\Team Project\\KV6002EsportsSociety\\website\\src\\components\\ResultsTable.js":"38","C:\\Users\\Connor\\Documents\\School\\University\\Third Year\\Team Project\\KV6002EsportsSociety\\website\\src\\components\\Team.js":"39","C:\\Users\\Connor\\Documents\\School\\University\\Third Year\\Team Project\\KV6002EsportsSociety\\website\\src\\components\\WeeklyEventsPage.js":"40","C:\\Users\\Connor\\Documents\\School\\University\\Third Year\\Team Project\\KV6002EsportsSociety\\website\\src\\components\\WeeklyEvents.js":"41","C:\\Users\\Connor\\Documents\\School\\University\\Third Year\\Team Project\\KV6002EsportsSociety\\website\\src\\components\\TwitchStream.js":"42","C:\\Users\\Connor\\Documents\\School\\University\\Third Year\\Team Project\\KV6002EsportsSociety\\website\\src\\components\\WeeklyEvent.js":"43","C:\\Users\\Connor\\Documents\\School\\University\\Third Year\\Team Project\\KV6002EsportsSociety\\website\\src\\components\\AdminResultsForm.js":"44","C:\\Users\\Connor\\Documents\\School\\University\\Third Year\\Team Project\\KV6002EsportsSociety\\website\\src\\components\\Footer.js":"45"},{"size":500,"mtime":1647264958127,"results":"46","hashOfConfig":"47"},{"size":362,"mtime":1647264958209,"results":"48","hashOfConfig":"47"},{"size":1621,"mtime":1650590387078,"results":"49","hashOfConfig":"47"},{"size":8480,"mtime":1650592983409,"results":"50","hashOfConfig":"47"},{"size":1465,"mtime":1648901536871,"results":"51","hashOfConfig":"47"},{"size":5829,"mtime":1650592264795,"results":"52","hashOfConfig":"47"},{"size":4168,"mtime":1650593041252,"results":"53","hashOfConfig":"47"},{"size":16903,"mtime":1650592503635,"results":"54","hashOfConfig":"47"},{"size":39069,"mtime":1650592089325,"results":"55","hashOfConfig":"47"},{"size":3321,"mtime":1650591258020,"results":"56","hashOfConfig":"47"},{"size":3341,"mtime":1650591240107,"results":"57","hashOfConfig":"47"},{"size":1388,"mtime":1650591081673,"results":"58","hashOfConfig":"47"},{"size":1550,"mtime":1650591383638,"results":"59","hashOfConfig":"47"},{"size":4484,"mtime":1650591116146,"results":"60","hashOfConfig":"47"},{"size":2725,"mtime":1650582235389,"results":"61","hashOfConfig":"47"},{"size":6300,"mtime":1650582235390,"results":"62","hashOfConfig":"47"},{"size":4818,"mtime":1650590455117,"results":"63","hashOfConfig":"47"},{"size":1387,"mtime":1650631606147,"results":"64","hashOfConfig":"47"},{"size":3918,"mtime":1650582235389,"results":"65","hashOfConfig":"47"},{"size":5014,"mtime":1650592369136,"results":"66","hashOfConfig":"47"},{"size":10034,"mtime":1650592206089,"results":"67","hashOfConfig":"47"},{"size":8243,"mtime":1650592391019,"results":"68","hashOfConfig":"47"},{"size":2713,"mtime":1650592240436,"results":"69","hashOfConfig":"47"},{"size":9468,"mtime":1650592318810,"results":"70","hashOfConfig":"47"},{"size":2356,"mtime":1650631590765,"results":"71","hashOfConfig":"47"},{"size":6343,"mtime":1650582235387,"results":"72","hashOfConfig":"47"},{"size":1922,"mtime":1650589479450,"results":"73","hashOfConfig":"47"},{"size":5269,"mtime":1650590439156,"results":"74","hashOfConfig":"47"},{"size":4005,"mtime":1650582235387,"results":"75","hashOfConfig":"47"},{"size":479,"mtime":1649163324002,"results":"76","hashOfConfig":"47"},{"size":3444,"mtime":1650582235386,"results":"77","hashOfConfig":"47"},{"size":5584,"mtime":1650589805989,"results":"78","hashOfConfig":"47"},{"size":1584,"mtime":1650397998412,"results":"79","hashOfConfig":"47"},{"size":1999,"mtime":1650397998415,"results":"80","hashOfConfig":"47"},{"size":4414,"mtime":1650629166305,"results":"81","hashOfConfig":"47"},{"size":4794,"mtime":1650629109153,"results":"82","hashOfConfig":"47"},{"size":1637,"mtime":1650582235383,"results":"83","hashOfConfig":"47"},{"size":3329,"mtime":1650591552671,"results":"84","hashOfConfig":"47"},{"size":833,"mtime":1649163324003,"results":"85","hashOfConfig":"47"},{"size":2718,"mtime":1650592565611,"results":"86","hashOfConfig":"47"},{"size":1223,"mtime":1650582235390,"results":"87","hashOfConfig":"47"},{"size":433,"mtime":1650544528153,"results":"88","hashOfConfig":"47"},{"size":514,"mtime":1650544528153,"results":"89","hashOfConfig":"47"},{"size":3215,"mtime":1650591200012,"results":"90","hashOfConfig":"47"},{"size":1249,"mtime":1650631244002,"results":"91","hashOfConfig":"47"},{"filePath":"92","messages":"93","suppressedMessages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},"1h9b043",{"filePath":"96","messages":"97","suppressedMessages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"99","messages":"100","suppressedMessages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"102","messages":"103","suppressedMessages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"106"},{"filePath":"107","messages":"108","suppressedMessages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"110","messages":"111","suppressedMessages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113"},{"filePath":"114","messages":"115","suppressedMessages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"106"},{"filePath":"118","messages":"119","suppressedMessages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121"},{"filePath":"122","messages":"123","suppressedMessages":"124","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125"},{"filePath":"126","messages":"127","suppressedMessages":"128","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"129","messages":"130","suppressedMessages":"131","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"132","messages":"133","suppressedMessages":"134","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"135","messages":"136","suppressedMessages":"137","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"138","messages":"139","suppressedMessages":"140","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"141","messages":"142","suppressedMessages":"143","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"95"},{"filePath":"145","messages":"146","suppressedMessages":"147","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"148","messages":"149","suppressedMessages":"150","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151"},{"filePath":"152","messages":"153","suppressedMessages":"154","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"155","messages":"156","suppressedMessages":"157","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"95"},{"filePath":"159","messages":"160","suppressedMessages":"161","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162"},{"filePath":"163","messages":"164","suppressedMessages":"165","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":3,"source":"166"},{"filePath":"167","messages":"168","suppressedMessages":"169","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"170"},{"filePath":"171","messages":"172","suppressedMessages":"173","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"174"},{"filePath":"175","messages":"176","suppressedMessages":"177","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"178","messages":"179","suppressedMessages":"180","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"181","messages":"182","suppressedMessages":"183","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"184","messages":"185","suppressedMessages":"186","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"187","messages":"188","suppressedMessages":"189","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"190"},{"filePath":"191","messages":"192","suppressedMessages":"193","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"194","usedDeprecatedRules":"95"},{"filePath":"195","messages":"196","suppressedMessages":"197","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"198","messages":"199","suppressedMessages":"200","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"201","usedDeprecatedRules":"95"},{"filePath":"202","messages":"203","suppressedMessages":"204","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"205"},{"filePath":"206","messages":"207","suppressedMessages":"208","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"209","messages":"210","suppressedMessages":"211","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"212","usedDeprecatedRules":"95"},{"filePath":"213","messages":"214","suppressedMessages":"215","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"216","messages":"217","suppressedMessages":"218","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"219","messages":"220","suppressedMessages":"221","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"222","messages":"223","suppressedMessages":"224","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"225"},{"filePath":"226","messages":"227","suppressedMessages":"228","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"229","messages":"230","suppressedMessages":"231","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"232"},{"filePath":"233","messages":"234","suppressedMessages":"235","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"236","usedDeprecatedRules":"95"},{"filePath":"237","messages":"238","suppressedMessages":"239","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"240","usedDeprecatedRules":"95"},{"filePath":"241","messages":"242","suppressedMessages":"243","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"244","messages":"245","suppressedMessages":"246","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"247","messages":"248","suppressedMessages":"249","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":5,"source":"250"},"C:\\Users\\Connor\\Documents\\School\\University\\Third Year\\Team Project\\KV6002EsportsSociety\\website\\src\\index.js",[],[],["251","252"],"C:\\Users\\Connor\\Documents\\School\\University\\Third Year\\Team Project\\KV6002EsportsSociety\\website\\src\\reportWebVitals.js",[],[],"C:\\Users\\Connor\\Documents\\School\\University\\Third Year\\Team Project\\KV6002EsportsSociety\\website\\src\\App.js",[],[],"C:\\Users\\Connor\\Documents\\School\\University\\Third Year\\Team Project\\KV6002EsportsSociety\\website\\src\\components\\Navbar.js",["253","254","255","256"],[],"import * as React from 'react';\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Box from '@mui/material/Box';\r\nimport Typography from '@mui/material/Typography';\r\nimport Button from '@mui/material/Button';\r\nimport { useNavigate, Link } from 'react-router-dom';\r\nimport jwt_decode from \"jwt-decode\";\r\nimport ProfilePic from \"../img/defaultprofilepicture.png\"\r\nimport Logo from \"../img/vikingssiloette.png\"\r\n\r\n/**\r\n* Navbar\r\n* \r\n* Creates the navbar for the page. Depending on the users credentials options will be adjusted. For\r\n* example, if the user is an admin, login will be replaced with logout and the admin panel option \r\n* will be shown.\r\n*\r\n* @author Connor Campbell W18003255\r\n* @collab Ethan Borrill W18001798\r\n*\r\n* @todo - Add functionality for the user to go to their own profile.\r\n        - Add vikings logo somewhere.\r\n*/\r\n\r\n\r\nexport default function ButtonAppBar() {\r\n    let navigate = useNavigate();\r\n\r\n    \r\n    /**\r\n    * toPage(path)\r\n    * \r\n    * Forwards the user to the page supplied in the parameters.\r\n    * \r\n    * @param String path  The name of the page to be forwarded to.\",\r\n    */\r\n    \r\n    const toPage = (path) => {\r\n        navigate(path);\r\n    }\r\n\r\n    \r\n    /**\r\n    * logout()\r\n    * \r\n    * Used to logout the user, both admin and authenticated are set to false then the user has \r\n    * their token removed. The page is then refreshed to update the page to the changes.\r\n    */\r\n    \r\n    let authenticated = false;\r\n    let admin = false;\r\n    let pageLink;\r\n    let ign;\r\n\r\n    const logout = () => {\r\n        authenticated = false;\r\n        admin = false;\r\n        localStorage.removeItem('UserLoginToken');\r\n        window.location.reload(true);\r\n    }\r\n\r\n    /**\r\n     * Checks if the user has a token, if they have a token, authenticate them, if they are an \r\n     * admin, allocated admin permissions.\r\n     */\r\n\r\n    if(localStorage.getItem(\"UserLoginToken\")) {\r\n        authenticated = true;\r\n        let decodedToken = jwt_decode(localStorage.getItem(\"UserLoginToken\"))\r\n        pageLink = \"../player/\" + decodedToken.user_id\r\n        ign = decodedToken.user_ign\r\n        if(decodedToken.user_isAdmin == 1) {\r\n            admin = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * If the user is authenticated and an admin, they will have access to the admin panel.\r\n     */\r\n\r\n    if(authenticated && admin) {\r\n        console.log(\"User is admin.\")\r\n        return (\r\n        <Box sx={{ flexGrow: 1 }}>\r\n        <AppBar position=\"static\">\r\n            <Box container spacing={2} alignItems=\"center\" sx={{maxHeight:\"100%\", display: 'flex', flexDirection: 'row', paddingRight: 2 }}>\r\n                <Typography sx={{ fontSize: 24, paddingLeft: 2, paddingRight: 2 }}>\r\n                    NORTHUMBRIA VIKINGS\r\n                </Typography>\r\n                <Button\r\n                    key=\"toEvents\"\r\n                    onClick={() => toPage(\"events\")}\r\n                    sx={{ color: 'white', display: 'block' }}\r\n                >\r\n                    Weekly Events\r\n                </Button>\r\n                <Button\r\n                    key=\"toResults\"\r\n                    onClick={() => toPage(\"results\")}\r\n                    sx={{ color: 'white', display: 'block', height: \"100%\" }}\r\n                >\r\n                    Results\r\n                </Button>\r\n                <Button\r\n                    key=\"toTeams\"\r\n                    onClick={() => toPage(\"team\")}\r\n                    sx={{ color: 'white', display: 'block' }}\r\n                >\r\n                    Teams\r\n                </Button>\r\n                <Button\r\n                    key=\"toAdmin\"\r\n                    onClick={() => toPage(\"admin\")}\r\n                    sx={{ color: 'white', display: 'block', marginLeft: \"auto\" }}\r\n                >\r\n                    Admin\r\n                </Button>\r\n                <a href={pageLink}>\r\n                    <Button\r\n                        key=\"logout\"\r\n                        sx={{ color: 'white', display: 'block', }}\r\n                    >\r\n                        {ign}\r\n                    </Button>\r\n                </a>\r\n                <Button\r\n                    key=\"logout\"\r\n                    onClick={() => logout()}\r\n                    sx={{ color: 'white', display: 'block', }}\r\n                >\r\n                    Logout\r\n                </Button>\r\n            </Box>\r\n        </AppBar>\r\n        </Box>\r\n        )\r\n    }\r\n\r\n    /**\r\n     * If the user is not an admin but is authenticated, they will still be shown the logged in navbar,\r\n     * just without the admin panel option.\r\n     */\r\n\r\n    if(authenticated && !admin) {\r\n        console.log(\"User is not admin.\")\r\n        return(\r\n            <Box sx={{ flexGrow: 1 }}>\r\n            <AppBar position=\"static\">\r\n                <Box container spacing={2} alignItems=\"center\" sx={{ display: 'flex', flexDirection: 'row', paddingRight: 2 }}>\r\n                    <Typography sx={{ fontSize: 24, paddingLeft: 2, paddingRight: 2 }}>\r\n                        NORTHUMBRIA VIKINGS\r\n                    </Typography>\r\n                    <Button\r\n                        key=\"toEvents\"\r\n                        onClick={() => toPage(\"events\")}\r\n                        sx={{ color: 'white', display: 'block' }}\r\n                    >\r\n                        Weekly Events\r\n                    </Button>\r\n                    <Button\r\n                        key=\"toResults\"\r\n                        onClick={() => toPage(\"results\")}\r\n                        sx={{ color: 'white', display: 'block', height: \"100%\" }}\r\n                    >\r\n                        Results\r\n                    </Button>\r\n                    <Button\r\n                        key=\"toTeams\"\r\n                        onClick={() => toPage(\"team\")}\r\n                        sx={{ color: 'white', display: 'block' }}\r\n                    >\r\n                        Teams\r\n                    </Button>\r\n                    <Box sx={{ color: 'white', display: 'block', marginLeft: \"auto\" }}>\r\n                        <a href={pageLink}>\r\n                            <Button\r\n                                key=\"playerpage\"\r\n                                sx={{ color: 'white', display: 'block', marginLeft: \"auto\" }}\r\n                            >\r\n                                {ign}\r\n                            </Button>\r\n                        </a>\r\n                    </Box>\r\n                    <Button\r\n                        key=\"toLogin\"\r\n                        onClick={() => logout()}\r\n                        sx={{ color: 'white', display: 'block'}}\r\n                    >\r\n                        Logout\r\n                    </Button>\r\n                </Box>\r\n            </AppBar>\r\n        </Box>\r\n        )\r\n    }\r\n\r\n    /**\r\n     * The default navbar to be shown if the user is not logged in.\r\n     */\r\n\r\n    return (\r\n        <Box sx={{ flexGrow: 1 }}>\r\n            <AppBar position=\"static\">\r\n                <Box container spacing={2} alignItems=\"center\" sx={{ display: 'flex', flexDirection: 'row', paddingRight: 2 }}>\r\n                    <Typography sx={{ fontSize: 24, paddingLeft: 2, paddingRight: 2 }}>\r\n                        NORTHUMBRIA VIKINGS\r\n                    </Typography>\r\n                    <Button\r\n                        key=\"toEvents\"\r\n                        onClick={() => toPage(\"events\")}\r\n                        sx={{ color: 'white', display: 'block' }}\r\n                    >\r\n                        Weekly Events\r\n                    </Button>\r\n                    <Button\r\n                        key=\"toResults\"\r\n                        onClick={() => toPage(\"results\")}\r\n                        sx={{ color: 'white', display: 'block', height: \"100%\" }}\r\n                    >\r\n                        Results\r\n                    </Button>\r\n                    <Button\r\n                        key=\"toTeams\"\r\n                        onClick={() => toPage(\"team\")}\r\n                        sx={{ color: 'white', display: 'block' }}\r\n                    >\r\n                        Teams\r\n                    </Button>\r\n                    <Button\r\n                        key=\"toLogin\"\r\n                        onClick={() => toPage(\"login\")}\r\n                        sx={{ color: 'white', display: 'block', marginLeft: \"auto\" }}\r\n                    >\r\n                        Login\r\n                    </Button>\r\n                </Box>\r\n            </AppBar>\r\n        </Box>\r\n    );\r\n}",["257","258"],"C:\\Users\\Connor\\Documents\\School\\University\\Third Year\\Team Project\\KV6002EsportsSociety\\website\\src\\components\\ErrorPage.js",[],[],"C:\\Users\\Connor\\Documents\\School\\University\\Third Year\\Team Project\\KV6002EsportsSociety\\website\\src\\components\\TeamPage.js",["259","260","261"],[],"import React from \"react\";\r\nimport TeamPlayers from \"./TeamPlayers\"\r\nimport TeamResults from \"./TeamResults\";\r\nimport TeamStats from \"./TeamStats\"\r\nimport TeamAccolades from \"./TeamAccolades\"\r\nimport { Box, Grid, Typography, Button } from \"@mui/material\";\r\nimport ProfilePic from \"../img/defaultprofilepicture.png\"\r\nimport jwt_decode from \"jwt-decode\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Helmet from \"react-helmet\";\r\n\r\n/**\r\n* TeamPage \r\n* \r\n* Creates a team page and returns it in component format. Uses a teamid supplied in props to create a profile\r\n* for the team. Uses the 'api/team' endpoint to get information on the player, and the TeamResults, TeamStats\r\n* TeamPlayers and TeamAccolades components to display information.\r\n*\r\n* @author Connor Campbell W18003255\r\n* @collab\r\n*\r\n* @todo\r\n*/\r\n\r\nexport default class TeamPage extends React.Component {\r\n\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            results : []\r\n        }\r\n    }\r\n\r\n    /**\r\n    * componentDidMount()\r\n    * \r\n    * Ran when the page is initially loaded. In this case, data from the 'api/team' regarding \r\n    * the teamid supplied in props will be returned.\r\n    */\r\n\r\n    componentDidMount() {\r\n        let url = \"http://unn-w18001798.newnumyspace.co.uk/KV6002/Assessment/api/team?id=\"\r\n        this.fetchData(url)\r\n    }\r\n\r\n    /**\r\n    * fetchData(url)\r\n    * \r\n    * Fetches API data from a given URL with a team ID appended. The data is stored in state.\r\n    */\r\n\r\n    fetchData = (url) => {\r\n        url += this.props.teamid\r\n        fetch(url)\r\n        .then( (response) => {\r\n            if (response.status === 200) {\r\n                return response.json() \r\n            } else {\r\n                throw Error(response.statusText);\r\n            }\r\n        })\r\n        .then( (data) => {\r\n            this.setState({results:data.results})\r\n        })\r\n        .catch ((err) => { \r\n            console.log(\"something went wrong \", err) \r\n        });\r\n    }\r\n\r\n    makeEditPath = (id) => {\r\n        return \"../editteam/\" + id\r\n    }\r\n    \r\n    render() {\r\n        let teamName;\r\n        let teamGame;\r\n        let teamLead;\r\n        let editButton = \"\"\r\n        this.state.results.map( (team) => teamName = team.team_name)\r\n        this.state.results.map( (team) => teamGame = team.game_name)\r\n        this.state.results.map( (team) => teamLead = team.team_lead)\r\n        \r\n        /*\r\n        * Checks if the user is the team lead or an admin, if either of these is true an edit page\r\n        * button will be displayed linking to the page for editing user profiles.\r\n        */\r\n\r\n        if(localStorage.getItem(\"UserLoginToken\")) {\r\n            let decodedToken = jwt_decode(localStorage.getItem(\"UserLoginToken\"))\r\n            if(decodedToken.user_isAdmin == 1 || decodedToken.user_id == teamLead) {\r\n                editButton = (\r\n                    <Link to={this.makeEditPath(this.props.teamid)}>\r\n                        <Button size=\"large\" sx={{backgroundColor:\"#D5761D\",color: 'white', display: 'block'}}>                        \r\n                            <Typography variant=\"h6\">\r\n                                Edit Page\r\n                            </Typography>\r\n                        </Button>\r\n                    </Link>\r\n                )\r\n            }\r\n        }\r\n\r\n        return(\r\n            <Box sx={{marginBottom:2, paddingLeft:3,paddingRight:3,marginLeft: 10,marginRight:10, paddingTop:2, paddingBottom:4,}}>\r\n            <Helmet>\r\n                <title>{teamName}</title>\r\n            </Helmet>\r\n            <Box sx={{paddingTop:2,paddingBottom:3}}>\r\n                <Grid container spacing={2} sx={{paddingLeft:2}}>\r\n                    <img src={ProfilePic} className=\"profliepic\" style={{width:\"20%\", borderRadius: '5% 5% 5% 5%'}}/>\r\n                    <Box sx={{paddingTop: \"2.5%\", paddingLeft: 2, textAlign:\"left\", display: \"block\"}}>\r\n                        <Typography variant=\"h1\">\r\n                            {teamName}\r\n                        </Typography>\r\n                        <Typography variant=\"h2\">\r\n                            {teamGame}\r\n                        </Typography>\r\n                    </Box>\r\n                    <Box sx={{display: 'block', marginLeft: \"auto\", marginRight: 2}}>\r\n                        {editButton}\r\n                    </Box>\r\n                </Grid>\r\n            </Box>\r\n            <Grid container spacing={5}>\r\n                <Grid item xs={8}>\r\n                    <Box sx={{backgroundColor:\"#424242\", borderRadius: '10px 10px 10px 10px', border: \"3px solid #D5761D\", height: \"100%\"}}>\r\n                        <TeamPlayers teamid={this.props.teamid}/>\r\n                    </Box>\r\n                </Grid>\r\n                <Grid item xs={4}>\r\n                <Box sx={{backgroundColor:\"#424242\", borderRadius: '10px 10px 10px 10px', border: \"3px solid #D5761D\", width: \"100%\", paddingLeft:1, paddingRight:1,}}>\r\n                    <TeamResults teamid={this.props.teamid}/>\r\n                </Box>\r\n                </Grid>\r\n                <Grid item xs={2}/>\r\n                <Grid item xs={4}>\r\n                <Box sx={{backgroundColor:\"#424242\", borderRadius: '10px 10px 10px 10px', border: \"3px solid #D5761D\", width: \"100%\",paddingLeft:1, paddingRight:1,}}>\r\n                    <TeamStats teamid={this.props.teamid}/>\r\n                </Box>\r\n                </Grid>\r\n                <Grid item xs={4}>\r\n                <Box sx={{backgroundColor:\"#424242\", borderRadius: '10px 10px 10px 10px', border: \"3px solid #D5761D\", height: \"100%\",paddingLeft:1, paddingRight:1,}}>\r\n                    <TeamAccolades teamid={this.props.teamid}/>\r\n                </Box>\r\n                </Grid>\r\n                <Grid item xs={2}/>\r\n            </Grid>\r\n            </Box>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n","C:\\Users\\Connor\\Documents\\School\\University\\Third Year\\Team Project\\KV6002EsportsSociety\\website\\src\\components\\Router.js",["262","263","264","265","266","267","268"],[],"import React from \"react\";\r\nimport Table from '@mui/material/Table';\r\nimport TableBody from '@mui/material/TableBody';\r\nimport TableCell from '@mui/material/TableCell';\r\nimport TableContainer from '@mui/material/TableContainer';\r\nimport TableHead from '@mui/material/TableHead';\r\nimport TableRow from '@mui/material/TableRow';\r\nimport { Typography } from \"@mui/material\";\r\nimport Navbar from './Navbar'\r\nimport { BrowserRouter, Routes, Route } from \"react-router-dom\";\r\nimport LoginRegisterPage from './LoginRegisterPage';\r\nimport AdminPage from './AdminPage'\r\nimport ErrorPage from './ErrorPage'\r\nimport TeamPage from './TeamPage';\r\nimport PlayerPage from './PlayerPage'\r\nimport AllTeamsPage from './AllTeamsPage'\r\nimport EditTeamPage from \"./EditTeamPage\";\r\nimport EditPlayerPage from \"./EditPlayerPage\";\r\nimport ResultsPage from \"./ResultsPage\";\r\nimport WeeklyEventsPage from \"./WeeklyEventsPage\";\r\n\r\nexport default class Router extends React.Component {\r\n\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            teamResults : [],\r\n            playerResults : []\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.fetchPlayerData()\r\n        this.fetchTeamData()\r\n    }\r\n\r\n    // componentDidUpdate(prevProps) {\r\n    //     this.fetchPlayerData()\r\n    //     this.fetchTeamData()\r\n    // }\r\n\r\n    fetchPlayerData = () => {\r\n        let playerUrl = \"http://unn-w18001798.newnumyspace.co.uk/KV6002/Assessment/api/player\"\r\n        fetch(playerUrl)\r\n        .then( (response) => {\r\n            if (response.status === 200) {\r\n                return response.json() \r\n            } else {\r\n                throw Error(response.statusText);\r\n            }\r\n        })\r\n        .then( (data) => {\r\n            this.setState({playerResults:data.results})\r\n        })\r\n        .catch ((err) => { \r\n            console.log(\"something went wrong \", err) \r\n        });\r\n    }\r\n\r\n    fetchTeamData = () => {\r\n        let teamUrl = \"http://unn-w18001798.newnumyspace.co.uk/KV6002/Assessment/api/team\"\r\n        fetch(teamUrl)\r\n        .then( (response) => {\r\n            if (response.status === 200) {\r\n                return response.json() \r\n            } else {\r\n                throw Error(response.statusText);\r\n            }\r\n        })\r\n        .then( (data) => {\r\n            this.setState({teamResults:data.results})\r\n        })\r\n        .catch ((err) => { \r\n            console.log(\"something went wrong \", err) \r\n        });\r\n    }\r\n\r\n    makeTeamPath = (id) => {\r\n        return \"team/\" + id\r\n    }\r\n\r\n    makePlayerPath = (id) => {\r\n        return \"player/\" + id\r\n    }\r\n\r\n    makeEditTeamPath = (id) => {\r\n        return \"editteam/\" + id\r\n    }\r\n\r\n    makeEditPlayerPath = (id) => {\r\n        return \"editplayer/\" + id\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <BrowserRouter>\r\n            <Navbar />\r\n              <Routes>\r\n                <Route path=\"/\">\r\n                  <Route index element={<WeeklyEventsPage/>} />\r\n                  <Route path=\"login\" element={<LoginRegisterPage />} />\r\n                  <Route path=\"admin\" element={<AdminPage />} />\r\n                  <Route path=\"results\" element={<ResultsPage />} />\r\n                  <Route path=\"team\" element={<AllTeamsPage />} />\r\n                  <Route path=\"events\" element={<WeeklyEventsPage/>} />\r\n                  {this.state.teamResults.map( (team) => ( <Route path={this.makeTeamPath(team.team_id)} element={<TeamPage teamid={team.team_id}/>} /> ))}\r\n                  {this.state.teamResults.map( (team) => ( <Route path={this.makeEditTeamPath(team.team_id)} element={<EditTeamPage teamid={team.team_id}/>} /> ))}\r\n                  {this.state.playerResults.map( (player) => ( <Route path={this.makePlayerPath(player.user_id)} element={<PlayerPage playerid={player.user_id}/>} /> ))}\r\n                  {this.state.playerResults.map( (player) => ( <Route path={this.makeEditPlayerPath(player.user_id)} element={<EditPlayerPage playerid={player.user_id}/>} /> ))}\r\n                  <Route path=\"*\" element={<ErrorPage/>} />\r\n                </Route>\r\n              </Routes>\r\n            </BrowserRouter>\r\n            )\r\n        }\r\n}","C:\\Users\\Connor\\Documents\\School\\University\\Third Year\\Team Project\\KV6002EsportsSociety\\website\\src\\components\\LoginRegisterPage.js",["269"],[],"import React from \"react\";\r\nimport FormLogin from \"./FormLogin\";\r\nimport FormRegister from \"./FormRegister\";\r\nimport jwt_decode from \"jwt-decode\";\r\nimport Typography from '@mui/material/Typography';\r\nimport Grid from '@mui/material/Grid';\r\nimport { Box } from \"@mui/system\";\r\nimport Helmet from \"react-helmet\";\r\n\r\n/**\r\n* LoginRegisterPage\r\n* \r\n* The Class manages the functionality and content displayed on the Login and Register page of the website. The page provides users with both a login and register form, both of which are accesible through the links are the bottom of each form - \r\n* which simply switches the state of the page to display the other form.\r\n*\r\n* @author Ethan Borrill W18001798\r\n*/\r\nclass LoginRegisterPage extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            user: false,\r\n            admin: false,\r\n            registered: false,\r\n            registerpage: false,\r\n            token: null,\r\n            email: null,\r\n            password: null,\r\n            userign: null,\r\n            userFirst: null,\r\n            userLast: null,\r\n            error: \"\",\r\n        }\r\n        this.handleEmail = this.handleEmail.bind(this);\r\n        this.handlePassword = this.handlePassword.bind(this);\r\n        this.handlefirstName = this.handlefirstName.bind(this);\r\n        this.handlelastName = this.handlelastName.bind(this);\r\n        this.handleUserIGN = this.handleUserIGN.bind(this);\r\n        this.handleLoginClick = this.handleLoginClick.bind(this);\r\n        this.handleRegisterClick = this.handleRegisterClick.bind(this);\r\n        this.handleRegisterState = this.handleRegisterState.bind(this);\r\n        this.handleLoginState = this.handleLoginState.bind(this);\r\n    }\r\n\r\n\r\n    /**\r\n    * componentDidMount\r\n    * \r\n    * This function is used within this file to check if there is a token within the local storage of the web browser. If there is one, the user value will be set to true, resulting in the login page being set to display a welcome page\r\n    * Which will prevent the user from logging in again.\r\n    */\r\n    componentDidMount() {\r\n        if (localStorage.getItem('UserLoginToken')) {\r\n            this.setState({\r\n                user: true,\r\n                token: localStorage.getItem('UserLoginToken')\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n\r\n    /**\r\n    * handleEmail(e)\r\n    * \r\n    * Handles the input and change of text within the email field used with the register and login pages.\r\n    *\r\n    */\r\n    handleEmail = (e) => {\r\n        this.setState({ email: e.target.value })\r\n    }\r\n\r\n\r\n    /**\r\n    * handlePassword(e)\r\n    * \r\n    * Handles the input and change of text within the password field used within the register and login pages.\r\n    *\r\n    */\r\n    handlePassword = (e) => {\r\n        this.setState({ password: e.target.value })\r\n    }\r\n\r\n\r\n    /**\r\n    * handlefirstName(e)\r\n    * \r\n    * Handles the input and change of text within the 'First Name' field used within the register page.\r\n    *\r\n    */\r\n    handlefirstName = (e) => {\r\n        this.setState({ userFirst: e.target.value })\r\n    }\r\n\r\n\r\n    /**\r\n    * handlelastName(e)\r\n    * \r\n    * Handles the input and change of text within the 'Last Name' field used within the register page.\r\n    *\r\n    */\r\n    handlelastName = (e) => {\r\n        this.setState({ userLast: e.target.value })\r\n    }\r\n\r\n\r\n    /**\r\n    * handleUserIGN(e)\r\n    * \r\n    * Handles the input and change of text within the 'User IGN' field used within the register page.\r\n    *\r\n    */\r\n    handleUserIGN = (e) => {\r\n        this.setState({ userign: e.target.value })\r\n    }\r\n\r\n    /**\r\n    * handleRegisterState()\r\n    * \r\n    * Changes the state of the webpage to display the register form when the user presses the register button on the Login page.\r\n    *\r\n    */\r\n    handleRegisterState = () => {\r\n        this.setState(\r\n            {\r\n                loginpage: false,\r\n                registerpage: true\r\n            }\r\n        )\r\n        if (this.state.registered){\r\n            this.setState({ error: \"You cannot re-register your account from here, please use the details you created to log in.\" })\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n    * handleLoginState()\r\n    * \r\n    * Changes the state of the webpage to display the login form when the user presses the login button on the Register page.\r\n    *\r\n    */\r\n    handleLoginState = () => {\r\n        this.setState(\r\n            {\r\n                loginpage: true,\r\n                registerpage: false\r\n            }\r\n        )\r\n    }\r\n\r\n\r\n    /**\r\n    * handleLoginClick()\r\n    * \r\n    * This functionality is used when the user presses the 'Login' button on the login page, this will first check the form data entered into it\r\n    * - which should the details be correct, the 'user' boolean is updated to true and a token is created to keep the user logged into the website should they leave.\r\n    *\r\n    * In the event the details entered are incorrect, this will be flagged within an error message and prevent the user from logging in.\r\n    * @param [type] $[var]   [Description]\r\n    */\r\n    handleLoginClick = () => {\r\n        let url = \"http://unn-w18001798.newnumyspace.co.uk/KV6002/Assessment/api/userlogin\"\r\n\r\n        let formData = new FormData();\r\n        formData.append('user_email', this.state.email);\r\n        formData.append('user_password', this.state.password);\r\n\r\n        fetch(url, {\r\n            method: 'POST',\r\n            headers: new Headers(),\r\n            body: formData\r\n        })\r\n            .then((response) => {\r\n                if (response.status === 200) { //If the status code of the webpage is 200, perform the login function from the API.\r\n                    return response.json()\r\n                } else if ((this.state.email === null) && (this.state.password === null)) {\r\n                    this.setState({ error: \"Please enter your email address & password  before attempting to login.\" })\r\n                } else if (this.state.email === null) {\r\n                    this.setState({ error: \"Please enter your email address.\" })\r\n                } else if (this.state.password === null) {\r\n                    this.setState({ error: \"Please enter your password.\" })\r\n                } else if (response.status === 401) { //If the status code of the webpage is 401, display an error saying the details collected are incorrect.\r\n                    this.setState({ error: \"The email address or password you have entered are not correct, please try again!\" })\r\n                }\r\n            })\r\n\r\n            .then((data) => { //Using the data collected from a successful login, store the data in a Java Web Token to be used on the webpage and set the boolean 'user' to true.\r\n                if (\"token\" in data.results) {\r\n                    this.setState(\r\n                        {\r\n                            user: true,\r\n                            token: data.results.token\r\n                        }\r\n                    )\r\n\r\n                    localStorage.setItem('UserLoginToken', data.results.token); //Store the Token within the Browser's local storage.\r\n                }\r\n            })\r\n            .catch((err) => {\r\n                console.log(\"something went wrong \", err)\r\n            }\r\n            );\r\n    }\r\n\r\n\r\n    /**\r\n    * handleRegisterClick\r\n    * \r\n    * This functionality handles when a user presses the Register button on the Register page. Includes error catches for if form inputs are empty.\r\n    * Will only submit data to the database if all fields are filled and provide the correct data. Upon complete submission, the boolean 'Registered' is updated to be true.\r\n    * This is used to move users to the secondary login page for users to login immediately after registering.\r\n    *\r\n    */\r\n    handleRegisterClick = () => {\r\n        let url = \"http://unn-w18001798.newnumyspace.co.uk/KV6002/Assessment/api/register\"\r\n\r\n        let formData = new FormData();\r\n        formData.append('user_email', this.state.email);\r\n        formData.append('user_password', this.state.password);\r\n        formData.append('user_ign', this.state.userign);\r\n        formData.append('user_firstName', this.state.userFirst);\r\n        formData.append('user_lastName', this.state.userLast);\r\n        fetch(url, {\r\n            method: 'POST',\r\n            headers: new Headers(),\r\n            body: formData\r\n        })\r\n            .then((response) => {\r\n                if ((this.state.email === null) && (this.state.password === null) && (this.state.userign === null) && (this.state.userFirst === null) && (this.state.userLast === null)) {\r\n                    this.setState({ error: \"Please answer all fields within the form before submitting.\" })\r\n                } else if (this.state.email === null) {\r\n                    this.setState({ error: \"Please enter an email.\" })\r\n                } else if (this.state.password === null) {\r\n                    this.setState({ error: \"Please enter a password (8-16 characters ).\" })\r\n                } else if (this.state.userign === null) {\r\n                    this.setState({ error: \"Please enter your In-Game Name\" })\r\n                } else if (this.state.userFirst === null) {\r\n                    this.setState({ error: \"Please enter your first name.\" })\r\n                } else if (this.state.userLast === null) {\r\n                    this.setState({ error: \"Please enter your last name.\" })\r\n                } else if (response.status === 406) {\r\n                    this.setState({ error: \"The email address or password you have entered is not acceptable.\" })\r\n                } else if (response.status === 403) {\r\n                    this.setState({ error: \"The email address you have entered already exists, please try another email address.\" })\r\n                } else if ((response.status === 200) || (response.status === 204)) {\r\n                    this.setState(\r\n                        {\r\n                            registered: true\r\n                        }\r\n                    )\r\n                    return response.json()\r\n                }\r\n            })\r\n            .catch((err) => {\r\n                console.log(\"something went wrong \", err)\r\n            }\r\n            );\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @returns {Page} - Will display the rendered page content based on the conditions required.\r\n     */\r\n    render() {\r\n        let errorMessage = this.state.error\r\n\r\n        /**\r\n         * Default page presented upon accessing the page, will display standard login page.\r\n         * Is also accessed should a user press the 'Already have an account? Log in here!' link on the register page.\r\n         */\r\n        let page = (\r\n            <Box sx={{ flexGrow: 1 }}>\r\n                <Helmet>\r\n                    <title>Login</title>\r\n                </Helmet>\r\n                <Grid container spacing={2}>\r\n                    <Grid item xs={12}>\r\n                        <Typography sx={{ fontSize: 30, fontWeight: 500 }}>\r\n                            Login\r\n                        </Typography>\r\n                        <Typography sx={{ fontSize: 24, fontWeight: 350 }}>\r\n                            Please enter your details to log into your account!\r\n                        </Typography>\r\n                    </Grid>\r\n                    <Grid item xs={4}>\r\n                    </Grid>\r\n                    <Grid item xs={4} sx={{ justifyContent: 'center' }}>\r\n                        <FormLogin\r\n                            handleEmail={this.handleEmail}\r\n                            handlePassword={this.handlePassword}\r\n                            handleLoginClick={this.handleLoginClick}\r\n                            handleRegisterState={this.handleRegisterState}\r\n                        />\r\n                        <ul><p className=\"errorMessage\">{errorMessage}</p></ul>\r\n                    </Grid>\r\n                    <Grid item xs={4}>\r\n                    </Grid>\r\n                </Grid>\r\n            </Box>\r\n        )\r\n\r\n\r\n        /**\r\n         * The content required for the Register page, will be displayed if user presses the 'Don't have an account? register one here!' link on the Login page.\r\n         */\r\n        if (this.state.registerpage) {\r\n            page = (\r\n                <Box sx={{ flexGrow: 1 }}>\r\n                    <Helmet>\r\n                        <title>Register</title>\r\n                    </Helmet>\r\n                    <Grid container spacing={2}>\r\n                        <Grid item xs={12}>\r\n                            <Typography sx={{ fontSize: 30, fontWeight: 500 }}>\r\n                                Register\r\n                            </Typography>\r\n                            <Typography sx={{ fontSize: 24, fontWeight: 350 }}>\r\n                                Please enter your details below to register your account!\r\n                            </Typography>\r\n                        </Grid>\r\n                        <Grid item xs={4}>\r\n                        </Grid>\r\n                        <Grid item xs={4} sx={{ justifyContent: 'center' }}>\r\n                            <FormRegister\r\n                                handlefirstName={this.handlefirstName}\r\n                                handlelastName={this.handlelastName}\r\n                                handleUserIGN={this.handleUserIGN}\r\n                                handleEmail={this.handleEmail}\r\n                                handlePassword={this.handlePassword}\r\n                                handleRegisterClick={this.handleRegisterClick}\r\n                                handleLoginState={this.handleLoginState}\r\n                            />\r\n                            <ul><p className=\"errorMessage\">{errorMessage}</p></ul>\r\n                        </Grid>\r\n                        <Grid item xs={4}>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Box>\r\n            )\r\n        }\r\n\r\n        /**\r\n         * Secondary login page content, displayed only when a user performs a successfuly account registration.\r\n         */\r\n        if (this.state.registered) {\r\n            page = (\r\n                <Box sx={{ flexGrow: 1 }}>\r\n                    <Helmet>\r\n                        <title>Registered</title>\r\n                    </Helmet>\r\n                    <Grid container spacing={2}>\r\n                        <Grid item xs={12}>\r\n                            <Typography sx={{ fontSize: 30, fontWeight: 500 }}>\r\n                                Your details have been successfully registered!\r\n                            </Typography>\r\n                            <Typography sx={{ fontSize: 24, fontWeight: 350 }}>\r\n                                Please enter your details below to log into your account!\r\n                            </Typography>\r\n                        </Grid>\r\n                        <Grid item xs={4}>\r\n                        </Grid>\r\n                        <Grid item xs={4} sx={{ justifyContent: 'center' }}>\r\n                            <FormLogin\r\n                                handleEmail={this.handleEmail}\r\n                                handlePassword={this.handlePassword}\r\n                                handleLoginClick={this.handleLoginClick}\r\n                                handleRegisterState={this.handleRegisterState}\r\n                            />\r\n                            <ul><p className=\"errorMessage\">{errorMessage}</p></ul>\r\n                        </Grid>\r\n                        <Grid item xs={4}>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Box>\r\n            )\r\n        }\r\n\r\n        /**\r\n         * Content to be displayed if a user has successfully logged into their account.\r\n         */\r\n        if (this.state.user) {\r\n            page = (\r\n                <Box sx={{ flexGrow: 1 }}>\r\n                    <Helmet>\r\n                        <title>Logged In</title>\r\n                    </Helmet>\r\n                    <Grid container spacing={2}>\r\n                        <Grid item xs={12}>\r\n                            <Typography sx={{ fontSize: 30, fontWeight: 500 }}>\r\n                                Login successful!\r\n                            </Typography>\r\n                            <Typography sx={{ fontSize: 24, fontWeight: 350 }}>\r\n                                You have been successfully logged! Please enjoy the site!\r\n                            </Typography>\r\n                        </Grid>\r\n                        <Grid item xs={4}>\r\n                        </Grid>\r\n                        <Grid item xs={4} sx={{ justifyContent: 'center' }}>\r\n                        </Grid>\r\n                        <Grid item xs={4}>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Box>\r\n            )\r\n        }\r\n        return (\r\n            <div>{page}</div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default LoginRegisterPage;","C:\\Users\\Connor\\Documents\\School\\University\\Third Year\\Team Project\\KV6002EsportsSociety\\website\\src\\components\\AdminPage.js",["270","271"],[],"import React from \"react\";\r\nimport AdminButtons from \"./AdminButtons.js\";\r\nimport jwt_decode from \"jwt-decode\";\r\nimport AdminFormWeeklyEvents from \"./AdminFormWeeklyEvents.js\";\r\nimport AdminFormTeamApplication from \"./AdminFormTeamApplication.js\";\r\nimport AdminFormTeamAccolades from \"./AdminFormTeamAccolades.js\";\r\nimport AdminFormJoinTeamApplication from \"./AdminFormJoinTeamApplication.js\";\r\nimport AdminResultsForm from \"./AdminResultsForm.js\";\r\nimport Typography from '@mui/material/Typography';\r\nimport { Box } from \"@mui/system\";\r\nimport Grid from '@mui/material/Grid';\r\nimport Helmet from \"react-helmet\";\r\n\r\n/**\r\n* AdminPage\r\n* \r\n* This class is used to manage the functionalites and content seen within the Administrative pages of the application, which are only accessible by verified users in teh database.\r\n* To check this, the user's webtoken is decoded to check whether the isAdmin value retrieved in association with their account is a value of 1, which will allow them access.\r\n*\r\n* Within this pafe, users can access several forms related to the functions within the website, such as the weekly results page, events and teams - these forms are then used to update content shown on these pages.\r\n*\r\n* @author Ethan Borrill W18001798\r\n*/\r\n\r\nclass AdminPage extends React.Component {\r\n\r\n\r\n    /**\r\n    * Constructor\r\n    * \r\n    * This function initialises several critical components needed for this file to run.\r\n    *\r\n    */\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            admin: false,\r\n            authenticated: true,\r\n            token: null,\r\n            error: \"\",\r\n\r\n            EventsForm: false,\r\n            ResultsForm: false,\r\n            TeamApplicationForm: false,\r\n            MemberApplicationForm: false,\r\n            AccoladesForm: false,\r\n\r\n            EventTitle: null,\r\n            EventDesc: null,\r\n            EventDate: null,\r\n\r\n            MatchteamDropDown: \"\",\r\n            MatchOpponent: null,\r\n            MatchDate: null,\r\n            MatchResults: null,\r\n\r\n            TeamDropDown: \"\",\r\n            AccoladesDropDown: \"\",\r\n            TeamApplicationsDropDown: \"\",\r\n            MemberApplicationDropDown: \"\",\r\n        }\r\n        this.handleLogoutClick = this.handleLogoutClick.bind(this);\r\n        this.handleEventsFormClick = this.handleEventsFormClick.bind(this);\r\n        this.handleTeamApplicationsClick = this.handleTeamApplicationsClick.bind(this);\r\n        this.handleTeamAccoladesClick = this.handleTeamAccoladesClick.bind(this);\r\n        this.handleMembersApplicationClick = this.handleMembersApplicationClick.bind(this);\r\n        this.handleMatchFormClick = this.handleMatchFormClick.bind(this);\r\n\r\n        this.handleTeamAccoladeSelect = this.handleTeamAccoladeSelect.bind(this);\r\n        this.handleTeamSelect = this.handleTeamSelect.bind(this);\r\n        this.handleAccoladeSubmit = this.handleAccoladeSubmit.bind(this);\r\n\r\n        this.handleEventTitle = this.handleEventTitle.bind(this);\r\n        this.handleEventDesc = this.handleEventDesc.bind(this);\r\n        this.handleEventDate = this.handleEventDate.bind(this);\r\n        this.handleEventSubmit = this.handleEventSubmit.bind(this);\r\n\r\n        this.handleTeamSubmissionsSelect = this.handleTeamSubmissionsSelect.bind(this);\r\n        this.handleTeamsFormApprove = this.handleTeamsFormApprove.bind(this);\r\n        this.handleTeamsFormDecline = this.handleTeamsFormDecline.bind(this);\r\n\r\n        this.handleMemberSubmissionsSelect = this.handleMemberSubmissionsSelect.bind(this);\r\n        this.handleMemberFormDecline = this.handleMemberFormDecline.bind(this);\r\n        this.handleMemberFormApprove = this.handleMemberFormApprove.bind(this);\r\n\r\n        this.handleMatchTeam  = this.handleMatchTeam.bind(this);\r\n        this.handleMatchOpponent = this.handleMatchOpponent.bind(this);\r\n        this.handleMatchDate = this.handleMatchDate.bind(this);\r\n        this.handleMatchResults = this.handleMatchResults.bind(this);\r\n        this.handleMatchSubmit = this.handleMatchSubmit.bind(this);\r\n    }\r\n\r\n\r\n    /**\r\n    * componentDidMount\r\n    * \r\n    * This function collects any webtoken stored within the browser made when logging into the site, this is then decoded to check the is_admin value stored within.\r\n    * Should the value of the is_admin be 1, admin access is granted - otherwise the unauthorised webpage will be displayed to prevent unwanted access.\r\n    *\r\n    */\r\n    componentDidMount() {\r\n        if (localStorage.getItem('UserLoginToken')) {\r\n            let decodedToken = jwt_decode(localStorage.getItem(\"UserLoginToken\"))\r\n            if (decodedToken.user_isAdmin == 1) {\r\n                this.setState({\r\n                    admin: true\r\n                });\r\n            }\r\n            else if (decodedToken.user_isAdmin == 0) {\r\n                this.setState({\r\n                    admin: false\r\n                });\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n    * handlePassword(e)\r\n    * \r\n    * Handles the input and change of text within the password field used within the register and login pages.\r\n    *\r\n    */\r\n    handlePassword = (e) => {\r\n        this.setState({ password: e.target.value })\r\n    }\r\n\r\n    /**\r\n    * handleEmail(e)\r\n    * \r\n    * Handles the input and change of text within the email field used with the register and login pages.\r\n    *\r\n    */\r\n    handleEmail = (e) => {\r\n        this.setState({ email: e.target.value })\r\n    }\r\n\r\n    /**\r\n    * handleLogoutClick\r\n    * \r\n    * Functionality to handle a users logout click within the collection of buttons on the left hand side, will remove the token from local storage - essentially logging the user out.\r\n    *\r\n    */\r\n    handleLogoutClick = () => {\r\n        this.setState(\r\n            {\r\n                admin: false,\r\n                token: null\r\n            }\r\n        )\r\n        localStorage.removeItem('UserLoginToken');\r\n    }\r\n    //FUNCTIONALITY FOR THE WEEKLY EVENTS FORM.\r\n    /**\r\n    * handleEventsFormClick\r\n    * \r\n    * This is used on the Events form button, will set the state needed for the Events form to be displayed to be true.\r\n    *\r\n    */\r\n    handleEventsFormClick = () => {\r\n        this.setState(\r\n            {\r\n                EventsForm: true,\r\n                ResultsForm: false,\r\n                TeamApplicationForm: false,\r\n                MemberApplicationForm: false,\r\n                AccoladesForm: false\r\n            }\r\n        )\r\n    }\r\n\r\n    /**\r\n    * handleEventTitle(e)\r\n    * \r\n    * Handles the input and change of text within the 'Event Title' field used within the Events form page.\r\n    *\r\n    */\r\n    handleEventTitle = (e) => {\r\n        this.setState({ EventTitle: e.target.value })\r\n    }\r\n\r\n    /**\r\n    * handleEventDesc(e)\r\n    * \r\n    * Handles the input and change of text within the 'Event Description' field used within the Events form page.\r\n    *\r\n    */\r\n    handleEventDesc = (e) => {\r\n        this.setState({ EventDesc: e.target.value })\r\n    }\r\n\r\n    /**\r\n    * handleEventDate(e)\r\n    * \r\n    * Handles the input and change of text within the 'Event Date' field used within the Events form page.\r\n    *\r\n    */\r\n    handleEventDate = (e) => {\r\n        this.setState({ EventDate: e.target.value })\r\n    }\r\n\r\n\r\n    /**\r\n    * handleEventSubmit\r\n    * \r\n    * This function is used on the Submission button present on the Events form page. \r\n    * Upon pressing the button, The contents entered within each field is checked to not be empty - if not the details are submitted to the Events table in the database.\r\n    *\r\n    */\r\n    handleEventSubmit = () => {\r\n        let url = \"http://unn-w18001798.newnumyspace.co.uk/KV6002/Assessment/api/eventsform\"\r\n\r\n        let formData = new FormData();\r\n        formData.append('event_name', this.state.EventTitle);\r\n        formData.append('event_description', this.state.EventDesc);\r\n        formData.append('event_date', this.state.EventDate);\r\n        fetch(url, {\r\n            method: 'POST',\r\n            headers: new Headers(),\r\n            body: formData\r\n        })\r\n            .then((response) => {\r\n                if ((this.state.EventTitle === null) && (this.state.EventDesc === null) && (this.state.EventDate === null)) {\r\n                    this.setState({ error: \"Please answer all fields within the form before submitting.\" })\r\n                } else if (this.state.EventTitle === null) {\r\n                    this.setState({ error: \"Please enter a Title for the event.\" })\r\n                } else if (this.state.EventDesc === null) {\r\n                    this.setState({ error: \"Please enter a description for the event.\" })\r\n                } else if (this.state.EventDate === null) {\r\n                    this.setState({ error: \"Please enter a date for the event.\" })\r\n                } else if (response.status === 406) {\r\n                    this.setState({ error: \"The event details you have entered cannot be used!\" })\r\n                } else if (response.status === 403) {\r\n                    this.setState({ error: \"Sorry, an event with this name already exists!\" })\r\n                } else if ((response.status === 200) || (response.status === 204)) {\r\n                    this.setState({ error: \"Event has been successfully created and uploaded!\" })\r\n                    return response.json()\r\n                }\r\n            })\r\n            .catch((err) => {\r\n                console.log(\"something went wrong \", err)\r\n            }\r\n            );\r\n    }\r\n\r\n    //FUNCTIONALITY FOR THE MATCH RESULTS FORM.\r\n    /**\r\n    * handleMatchFormClick\r\n    * \r\n    * This is used on the Add match results form button, will set the state needed for the Match Results form to be displayed to be true.\r\n    *\r\n    */\r\n    handleMatchFormClick =() => {\r\n        this.setState(\r\n            {\r\n                EventsForm: false,\r\n                ResultsForm: true,\r\n                TeamApplicationForm: false,\r\n                MemberApplicationForm: false,\r\n                AccoladesForm: false\r\n            }\r\n        )\r\n    }\r\n\r\n    /**\r\n    * handleMatchTeam\r\n    * \r\n    * This function handles the updating of the dropdown box used on the 'Match Results' page, which is essential for navigating applications via updating the ID used in the dropdown box to identify each item.\r\n    *\r\n    */\r\n     handleMatchTeam = (e) => {\r\n        this.setState({ MatchteamDropDown: e.target.value })\r\n    }\r\n\r\n    /**\r\n    * handleMatchOpponent(e)\r\n    * \r\n    * Handles the input and change of text within the 'Opponent' field used within the Events form page.\r\n    *\r\n    */\r\n     handleMatchOpponent = (e) => {\r\n        this.setState({ MatchOpponent: e.target.value })\r\n    }\r\n\r\n    /**\r\n    * handleMatchDate(e)\r\n    * \r\n    * Handles the input and change of text within the 'Match date' field used within the Events form page.\r\n    *\r\n    */\r\n     handleMatchDate = (e) => {\r\n        this.setState({ MatchDate: e.target.value })\r\n    }\r\n\r\n    /**\r\n    * handleMatchResults(e)\r\n    * \r\n    * Handles the input and change of text within the 'Match Field' field used within the Events form page.\r\n    *\r\n    */\r\n     handleMatchResults = (e) => {\r\n        this.setState({ MatchResults: e.target.value })\r\n    }\r\n\r\n\r\n    /**\r\n    * handleMatchSubmit\r\n    * \r\n    * This function is used on the Submission button present on the Match results form page. \r\n    * Upon pressing the button, The contents entered within each field is checked to not be empty - if not the details are submitted to the matchHistory table in the database.\r\n    *\r\n    */\r\n    handleMatchSubmit = () => {\r\n        let url = \"http://unn-w18001798.newnumyspace.co.uk/KV6002/Assessment/api/matchresultsform\"\r\n\r\n        let formData = new FormData();\r\n        formData.append('match_teamId', this.state.MatchteamDropDown);\r\n        formData.append('match_opponent', this.state.MatchOpponent);\r\n        formData.append('match_date', this.state.MatchDate);\r\n        formData.append('match_outcome', this.state.MatchResults);\r\n        fetch(url, {\r\n            method: 'POST',\r\n            headers: new Headers(),\r\n            body: formData\r\n        })\r\n            .then((response) => {\r\n                if ((this.state.MatchteamDropDown === \"\") && (this.state.MatchOpponent === null) && (this.state.MatchDate === null) && (this.state.MatchResults === null)) {\r\n                    this.setState({ error: \"Please answer all fields within the form before submitting.\" })\r\n                } else if (this.state.MatchteamDropDown === \"\") {\r\n                    this.setState({ error: \"Please select a team which played in the match!\" })\r\n                } else if (this.state.MatchOpponent === null) {\r\n                    this.setState({ error: \"Please enter the Opponent of this match.\" })\r\n                } else if (this.state.MatchDate === null) {\r\n                    this.setState({ error: \"Please enter the date the match took place on.\" })\r\n                } else if (this.state.MatchResults === null) {\r\n                    this.setState({ error: \"Please the results of the match.\" })\r\n                } else if (response.status === 406) {\r\n                    this.setState({ error: \"The match details you have entered cannot be used!\" })\r\n                } else if (response.status === 403) {\r\n                    this.setState({ error: \"Sorry, a match with these details already exists!\" })\r\n                } else if ((response.status === 200) || (response.status === 204)) {\r\n                    this.setState({ error: \"The matches results has been successfully created and uploaded!\" })\r\n                    return response.json()\r\n                }\r\n            })\r\n            .catch((err) => {\r\n                console.log(\"something went wrong \", err)\r\n            }\r\n            );\r\n    }\r\n\r\n    //FUNCTIONALITY FOR THE TEAM MANAGEMENT PAGE.\r\n    /**\r\n    * handleTeamApplicationsClick\r\n    * \r\n    * This is used on the ManageTeams form button, will set the state needed for the Team management form to be displayed to be true.\r\n    *\r\n    */\r\n    handleTeamApplicationsClick = () => {\r\n        this.setState(\r\n            {\r\n                EventsForm: false,\r\n                ResultsForm: false,\r\n                TeamApplicationForm: true,\r\n                MemberApplicationForm: false,\r\n                AccoladesForm: false\r\n            }\r\n        )\r\n    }\r\n\r\n    /**\r\n    * handleTeamSubmissionsSelect\r\n    * \r\n    * This function handles the updating of the dropdown box used on the 'Teams Application' page, which is essential for navigating applications via updating the ID used in the dropdown box to identify each item.\r\n    *\r\n    */\r\n    handleTeamSubmissionsSelect = (e) => {\r\n        this.setState({ TeamApplicationsDropDown: e.target.value })\r\n    }\r\n\r\n    /**\r\n    * handleTeamsFormApprove\r\n    * \r\n    * This function handles the Approval of a team application from the pendingTeams list, this is assigned to the 'Approve application' button on the Team Applications.\r\n    * The form is managed using the dropdown box, which displays the name of the Team in accordance with the list of applications displayed above the dropdown.\r\n    *\r\n    */\r\n    handleTeamsFormApprove = () => {\r\n        let url = \"http://unn-w18001798.newnumyspace.co.uk/KV6002/Assessment/api/pendingteamsapprove\"\r\n\r\n        let formData = new FormData();\r\n        formData.append('team_id', this.state.TeamApplicationsDropDown);\r\n        fetch(url, {\r\n            method: 'POST',\r\n            headers: new Headers(),\r\n            body: formData\r\n        })\r\n            .then((response) => {\r\n                if ((this.state.TeamApplicationsDropDown === \"\")) {\r\n                    this.setState({ error: \"Please select an application before approving!\" })\r\n                }\r\n                else if ((response.status === 200) || (response.status === 204)) {\r\n                    this.setState({ error: \"This team submission has been approved! You can now safely delete this application.\" })\r\n                    return response.json()\r\n                }\r\n            })\r\n            .catch((err) => {\r\n                console.log(\"something went wrong \", err)\r\n            }\r\n            );\r\n    }\r\n\r\n    /**\r\n    * handleTeamsFormDecline\r\n    * \r\n    * This function handles the deletion of a team application from the pendingTeams list, this is assigned to the Decline application button on the Team Applications.\r\n    * The form is managed using the dropdown box, which displays the name of the Team in accordance with the list of applications displayed above the dropdown.\r\n    *\r\n    */\r\n    handleTeamsFormDecline = () => {\r\n        let url = \"http://unn-w18001798.newnumyspace.co.uk/KV6002/Assessment/api/pendingteamsremove\"\r\n\r\n        let formData = new FormData();\r\n        formData.append('team_id', this.state.TeamApplicationsDropDown);\r\n        fetch(url, {\r\n            method: 'POST',\r\n            headers: new Headers(),\r\n            body: formData\r\n        })\r\n            .then((response) => {\r\n                if (this.state.TeamApplicationsDropDown === \"\") {\r\n                    this.setState({ error: \"Please select an application before attempting to delete!\" })\r\n                } else if ((response.status === 200) || (response.status === 204)) {\r\n                    this.setState({ error: \"This team application has been successfully deleted!\" })\r\n                    return response.json()\r\n                }\r\n            })\r\n            .catch((err) => {\r\n                console.log(\"something went wrong \", err)\r\n            }\r\n            );\r\n    }\r\n\r\n    //FUNCTIONALITY FOR THE ACCOLADES PAGE.\r\n    /**\r\n    * handleTeamAccoladesClick\r\n    * \r\n    * This is used on the Accolades form button, will set the state needed for the Accolades form to be displayed to be true.\r\n    *\r\n    */\r\n    handleTeamAccoladesClick = () => {\r\n        this.setState(\r\n            {\r\n                EventsForm: false,\r\n                ResultsForm: false,\r\n                TeamApplicationForm: false,\r\n                MemberApplicationForm: false,\r\n                AccoladesForm: true\r\n            }\r\n        )\r\n    }\r\n\r\n    /**\r\n    * handleTeamSelect\r\n    * \r\n    * This function handles updating the option selected within the Teams dropdown used by the Accolades form, this is done so that the correct ID is collected and sent during submission.\r\n    *\r\n    */\r\n    handleTeamSelect = (e) => {\r\n        this.setState({ TeamDropDown: e.target.value })\r\n    }\r\n\r\n    /**\r\n    * handleTeamAccolade Select\r\n    * \r\n    * This function handles updating the option selected within the Accolades dropdown used by the Accolades form, this is done so that the correct ID is collected and sent during submission.\r\n    *\r\n    */\r\n    handleTeamAccoladeSelect = (e) => {\r\n        this.setState({ AccoladesDropDown: e.target.value })\r\n    }\r\n\r\n    /**\r\n    * handleAccoladeSubmit\r\n    * \r\n    * This function is used with the Submission button shown on the accolade page, upon pressing this button a check is performed. This check determines if the dropdowns used have an option selected within them,\r\n    * If a team has been selected and the accolade ID have been selected - the ID of these 2 components are inserted into the teamAccolades table within the database.\r\n    */\r\n    handleAccoladeSubmit = () => {\r\n        let url = \"http://unn-w18001798.newnumyspace.co.uk/KV6002/Assessment/api/accoladesform\"\r\n\r\n        let formData = new FormData();\r\n        formData.append('userTeam_id', this.state.TeamDropDown);\r\n        formData.append('accolade_id', this.state.AccoladesDropDown);\r\n        fetch(url, {\r\n            method: 'POST',\r\n            headers: new Headers(),\r\n            body: formData\r\n        })\r\n            .then((response) => {\r\n                if ((this.state.TeamDropDown === \"\") && (this.state.AccoladesDropDown === \"\")) {\r\n                    this.setState({ error: \"Please provide both an Team and Accolade before submitting.\" })\r\n                }\r\n                else if (this.state.TeamDropDown === \"\") {\r\n                    this.setState({ error: \"Please enter a team to provide this accolade to!\" })\r\n                }\r\n                else if (this.state.AccoladesDropDown === \"\") {\r\n                    this.setState({ error: \"Please enter an accolade for this team!\" })\r\n                }\r\n                else if ((response.status === 200) || (response.status === 204)) {\r\n                    this.setState({ error: \"Accolade has been successfully Assigned!\" })\r\n                    return response.json()\r\n                }\r\n            })\r\n            .catch((err) => {\r\n                console.log(\"something went wrong \", err)\r\n            }\r\n            );\r\n    }\r\n\r\n    \r\n    /**\r\n    * handleMembersApplicationClick\r\n    * \r\n    * Manages the functionality on the 'Member applications' button on the left hand side of the page. Will change the state of the page to display the Members applications form.\r\n    *\r\n    */\r\n    handleMembersApplicationClick = () => {\r\n        this.setState(\r\n            {\r\n                EventsForm: false,\r\n                ResultsForm: false,\r\n                TeamApplicationForm: false,\r\n                MemberApplicationForm: true,\r\n                AccoladesForm: false\r\n            }\r\n        )\r\n    }\r\n\r\n    \r\n    /**\r\n    * handleMemberSubmissionsSelect\r\n    * \r\n    * Will update the dropdown menu used on the Member applications page.\r\n    *\r\n    */\r\n    handleMemberSubmissionsSelect = (e) => {\r\n        this.setState({ MemberApplicationDropDown: e.target.value })\r\n    }\r\n\r\n    /**\r\n    * handleMemberFormApprove\r\n    * \r\n    * This function handles the Approval of a member application from the pendingMembers list, this is assigned to the 'Approve application' button on the Members Applications.\r\n    * The form is managed using the dropdown box, which displays the name of the User in accordance with the list of applications displayed above the dropdown.\r\n    *\r\n    */\r\n    handleMemberFormApprove = () => {\r\n        let url = \"http://unn-w18001798.newnumyspace.co.uk/KV6002/Assessment/api/pendingmembersapprove\"\r\n\r\n        let formData = new FormData();\r\n        formData.append('user_id', this.state.MemberApplicationDropDown);\r\n        fetch(url, {\r\n            method: 'POST',\r\n            headers: new Headers(),\r\n            body: formData\r\n        })\r\n            .then((response) => {\r\n                if ((this.state.MemberApplicationDropDown === \"\")) {\r\n                    this.setState({ error: \"Please select an application before approving!\" })\r\n                }\r\n                else if ((response.status === 200) || (response.status === 204)) {\r\n                    this.setState({ error: \"This users application has been approved! You can now safely delete this application.\" })\r\n                    return response.json()\r\n                }\r\n            })\r\n            .catch((err) => {\r\n                console.log(\"something went wrong \", err)\r\n            }\r\n            );\r\n    }\r\n\r\n    /**\r\n    * handleMemberFormApprove\r\n    * \r\n    * This function handles the Deletion of a member application from the pendingMembers list, this is assigned to the 'Decline application' button on the Members Applications.\r\n    * The form is managed using the dropdown box, which displays the name of the User in accordance with the list of applications displayed above the dropdown.\r\n    *\r\n    */\r\n    handleMemberFormDecline = () => {\r\n        let url = \"http://unn-w18001798.newnumyspace.co.uk/KV6002/Assessment/api/pendingmembersdisapprove\"\r\n\r\n        let formData = new FormData();\r\n        formData.append('user_id', this.state.MemberApplicationDropDown);\r\n        fetch(url, {\r\n            method: 'POST',\r\n            headers: new Headers(),\r\n            body: formData\r\n        })\r\n            .then((response) => {\r\n                if (this.state.MemberApplicationDropDown === \"\") {\r\n                    this.setState({ error: \"Please select an application before attempting to delete!\" })\r\n                } else if ((response.status === 200) || (response.status === 204)) {\r\n                    this.setState({ error: \"This users application has been declined and deleted!\" })\r\n                    return response.json()\r\n                }\r\n            })\r\n            .catch((err) => {\r\n                console.log(\"something went wrong \", err)\r\n            }\r\n            );\r\n    }\r\n\r\n\r\n    /**\r\n    * render\r\n    * \r\n    * This function will create and display the required functionalities for the Adminpage to operate as intended, this consists of several states created by clicking the buttons presented to the left of the page.\r\n    * Upon pressing these buttons the relevant forms and inputs will be displayed to update certain data displayed on the webpage.\r\n    *\r\n    * @returns {Page} - Will display the rendered page content based on the conditions required.\r\n    */\r\n    render() {\r\n        let page;\r\n        let errorMessage = this.state.error\r\n\r\n        if (this.state.admin) {\r\n            if (this.state.EventsForm) { //EVENTS FORM STATE\r\n                page = (\r\n                    \r\n                    <Box sx={{ flexGrow: 1 }}>\r\n                        <Helmet>\r\n                            <title>Admin</title>\r\n                        </Helmet>\r\n                        <Grid container spacing={2}>\r\n                            <Grid item xs={12}>\r\n                                <Typography sx={{ fontSize: 30, fontWeight: 500 }}>\r\n                                    Add an event!\r\n                                </Typography>\r\n                                <Typography sx={{ fontSize: 24, fontWeight: 350 }}>\r\n                                    Enter the event's details down below!\r\n                                </Typography>\r\n                            </Grid>\r\n                            <Grid item xs={2}>\r\n                                <AdminButtons\r\n                                    handleEventsFormClick={this.handleEventsFormClick}\r\n                                    handleMatchFormClick={this.handleMatchFormClick}\r\n                                    handleTeamApplicationsClick={this.handleTeamApplicationsClick}\r\n                                    handleMembersApplicationClick={this.handleMembersApplicationClick}\r\n                                    handleTeamAccoladesClick={this.handleTeamAccoladesClick}\r\n                                    handleLogoutClick={this.handleLogoutClick} />\r\n                            </Grid>\r\n                            <Grid item xs={9}>\r\n                                <AdminFormWeeklyEvents\r\n                                    handleEventTitle={this.handleEventTitle}\r\n                                    handleEventDesc={this.handleEventDesc}\r\n                                    handleEventDate={this.handleEventDate}\r\n                                    handleEventSubmit={this.handleEventSubmit} />\r\n                                <ul><p className=\"errorMessage\">{errorMessage}</p></ul>\r\n                            </Grid>\r\n                            <Grid item xs={1}>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Box>\r\n                )\r\n            } else if (this.state.ResultsForm) { //TEAM APPLICATION STATE\r\n                page = (\r\n                    <Box sx={{ flexGrow: 1 }}>\r\n                        <Helmet>\r\n                            <title>Admin</title>\r\n                        </Helmet>\r\n                        <Grid container spacing={2}>\r\n                            <Grid item xs={12}>\r\n                                <Typography sx={{ fontSize: 30, fontWeight: 500 }}>\r\n                                    Add match results\r\n                                </Typography>\r\n                                <Typography sx={{ fontSize: 24, fontWeight: 350 }}>\r\n                                    Enter the details of a match below!\r\n                                </Typography>\r\n                            </Grid>\r\n                            <Grid item xs={2}>\r\n                                <AdminButtons\r\n                                    handleEventsFormClick={this.handleEventsFormClick}\r\n                                    handleMatchFormClick={this.handleMatchFormClick}\r\n                                    handleTeamApplicationsClick={this.handleTeamApplicationsClick}\r\n                                    handleMembersApplicationClick={this.handleMembersApplicationClick}\r\n                                    handleTeamAccoladesClick={this.handleTeamAccoladesClick}\r\n                                    handleLogoutClick={this.handleLogoutClick} />\r\n                            </Grid>\r\n                            <Grid item xs={9}>\r\n                                <AdminResultsForm\r\n                                    handleMatchTeam={this.handleMatchTeam}\r\n                                    handleMatchOpponent={this.handleMatchOpponent}\r\n                                    handleMatchDate={this.handleMatchDate}\r\n                                    handleMatchResults={this.handleMatchResults}\r\n                                    handleMatchSubmit={this.handleMatchSubmit} />\r\n                                <ul><p className=\"errorMessage\">{errorMessage}</p></ul>\r\n                            </Grid>\r\n                            <Grid item xs={1}>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Box>\r\n                )\r\n            } else if (this.state.TeamApplicationForm) { //TEAM APPLICATION STATE\r\n                page = (\r\n                    <Box sx={{ flexGrow: 1 }}>\r\n                        <Helmet>\r\n                            <title>Admin</title>\r\n                        </Helmet>\r\n                        <Grid container spacing={2}>\r\n                            <Grid item xs={12}>\r\n                                <Typography sx={{ fontSize: 30, fontWeight: 500 }}>\r\n                                    Team Applications\r\n                                </Typography>\r\n                                <Typography sx={{ fontSize: 24, fontWeight: 350 }}>\r\n                                    Please use the dropdown box to approve or decline applications.\r\n                                </Typography>\r\n                            </Grid>\r\n                            <Grid item xs={2}>\r\n                                <AdminButtons\r\n                                    handleEventsFormClick={this.handleEventsFormClick}\r\n                                    handleMatchFormClick={this.handleMatchFormClick}\r\n                                    handleTeamApplicationsClick={this.handleTeamApplicationsClick}\r\n                                    handleMembersApplicationClick={this.handleMembersApplicationClick}\r\n                                    handleTeamAccoladesClick={this.handleTeamAccoladesClick}\r\n                                    handleLogoutClick={this.handleLogoutClick} />\r\n                            </Grid>\r\n                            <Grid item xs={9}>\r\n                                <AdminFormTeamApplication\r\n                                    handleTeamSubmissionsSelect={this.handleTeamSubmissionsSelect}\r\n                                    handleTeamsFormApprove={this.handleTeamsFormApprove}\r\n                                    handleTeamsFormDecline={this.handleTeamsFormDecline} />\r\n                                <ul><p className=\"errorMessage\">{errorMessage}</p></ul>\r\n                            </Grid>\r\n                            <Grid item xs={1}>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Box>\r\n                )\r\n            } else if (this.state.MemberApplicationForm) { //MEMBER APPLICATION STATE.\r\n                page = (\r\n                    <Box sx={{ flexGrow: 1 }}>\r\n                        <Helmet>\r\n                            <title>Admin</title>\r\n                        </Helmet>\r\n                        <Grid container spacing={2}>\r\n                            <Grid item xs={12}>\r\n                                <Typography sx={{ fontSize: 30, fontWeight: 500 }}>\r\n                                    Manage User Applications\r\n                                </Typography>\r\n                                <Typography sx={{ fontSize: 24, fontWeight: 350 }}>\r\n                                   Please use the dropdown box to approve or decline applications.\r\n                                </Typography>\r\n                            </Grid>\r\n                            <Grid item xs={2}>\r\n                                <AdminButtons\r\n                                    handleEventsFormClick={this.handleEventsFormClick}\r\n                                    handleMatchFormClick={this.handleMatchFormClick}\r\n                                    handleTeamApplicationsClick={this.handleTeamApplicationsClick}\r\n                                    handleMembersApplicationClick={this.handleMembersApplicationClick}\r\n                                    handleTeamAccoladesClick={this.handleTeamAccoladesClick}\r\n                                    handleLogoutClick={this.handleLogoutClick} />\r\n                            </Grid>\r\n                            <Grid item xs={9}>\r\n                                <AdminFormJoinTeamApplication\r\n                                    handleMemberSubmissionsSelect={this.handleMemberSubmissionsSelect}\r\n                                    handleMemberFormApprove={this.handleMemberFormApprove}\r\n                                    handleMemberFormDecline={this.handleMemberFormDecline} />\r\n                                <ul><p className=\"errorMessage\">{errorMessage}</p></ul>\r\n                            </Grid>\r\n                            <Grid item xs={1}>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Box>\r\n                )\r\n            } else if (this.state.AccoladesForm) { //ACCOLADES FORM STATE\r\n                page = (\r\n                    <Box sx={{ flexGrow: 1 }}>\r\n                        <Helmet>\r\n                            <title>Admin</title>\r\n                        </Helmet>\r\n                        <Grid container spacing={2}>\r\n                            <Grid item xs={12}>\r\n                                <Typography sx={{ fontSize: 30, fontWeight: 500 }}>\r\n                                    Add an Accolade\r\n                                </Typography>\r\n                                <Typography sx={{ fontSize: 24, fontWeight: 350 }}>\r\n                                    Please select the team below and the accolades you wish to add!\r\n                                </Typography>\r\n                            </Grid>\r\n                            <Grid item xs={2}>\r\n                                <AdminButtons\r\n                                    handleEventsFormClick={this.handleEventsFormClick}\r\n                                    handleMatchFormClick={this.handleMatchFormClick}\r\n                                    handleTeamApplicationsClick={this.handleTeamApplicationsClick}\r\n                                    handleMembersApplicationClick={this.handleMembersApplicationClick}\r\n                                    handleTeamAccoladesClick={this.handleTeamAccoladesClick}\r\n                                    handleLogoutClick={this.handleLogoutClick} />\r\n                            </Grid>\r\n                            <Grid item xs={9}>\r\n                                <AdminFormTeamAccolades\r\n                                    handleTeamAccoladeSelect={this.handleTeamAccoladeSelect}\r\n                                    handleTeamSelect={this.handleTeamSelect}\r\n                                    handleAccoladeSubmit={this.handleAccoladeSubmit} />\r\n                                <ul><p className=\"errorMessage\">{errorMessage}</p></ul>\r\n                            </Grid>\r\n                            <Grid item xs={1}>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Box>\r\n                )\r\n            } else { //LANDING PAGE STATE.\r\n                page = (\r\n                    <Box sx={{ flexGrow: 1 }}>\r\n                        <Helmet>\r\n                            <title>Admin</title>\r\n                        </Helmet>\r\n                        <Grid container spacing={2}>\r\n                            <Grid item xs={12}>\r\n                                <Typography sx={{ fontSize: 30, fontWeight: 500 }}>\r\n                                    Administrative Options\r\n                                </Typography>\r\n                                <Typography sx={{ fontSize: 24, fontWeight: 350 }}>\r\n                                    Please select an option from the list on the left!\r\n                                </Typography>\r\n                            </Grid>\r\n                            <Grid item xs={2}>\r\n                                <AdminButtons\r\n                                    handleEventsFormClick={this.handleEventsFormClick}\r\n                                    handleMatchFormClick={this.handleMatchFormClick}\r\n                                    handleTeamApplicationsClick={this.handleTeamApplicationsClick}\r\n                                    handleMembersApplicationClick={this.handleMembersApplicationClick}\r\n                                    handleTeamAccoladesClick={this.handleTeamAccoladesClick}\r\n                                    handleLogoutClick={this.handleLogoutClick} />\r\n                            </Grid>\r\n                            <Grid item xs={8}>\r\n                            </Grid>\r\n                            <Grid item xs={3}>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Box>\r\n                )\r\n            }\r\n        } else { //Unauthorised ACCESS STATE\r\n            page = (\r\n                <Box sx={{ flexGrow: 1 }}>\r\n                    <Helmet>\r\n                        <title>Admin</title>\r\n                    </Helmet>\r\n                    <Grid container spacing={2}>\r\n                        <Grid item xs={12}>\r\n                            <Typography sx={{ fontSize: 30, fontWeight: 500 }}>\r\n                                Unauthorised access!\r\n                            </Typography>\r\n                            <Typography sx={{ fontSize: 24, fontWeight: 350 }}>\r\n                                Unfortunately, you do not have the required level of access to enter this page!\r\n                                <br></br>Please leave this page and return to the rest of the site.\r\n                            </Typography>\r\n                        </Grid>\r\n                        <Grid item xs={1}>\r\n                        </Grid>\r\n                        <Grid item xs={8}>\r\n                        </Grid>\r\n                        <Grid item xs={3}>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Box>\r\n            )\r\n        }\r\n\r\n        return (\r\n            <div>{page}</div>\r\n        )\r\n    }\r\n}\r\nexport default AdminPage;\r\n","C:\\Users\\Connor\\Documents\\School\\University\\Third Year\\Team Project\\KV6002EsportsSociety\\website\\src\\components\\AdminFormJoinTeamApplication.js",[],[],"C:\\Users\\Connor\\Documents\\School\\University\\Third Year\\Team Project\\KV6002EsportsSociety\\website\\src\\components\\AdminFormTeamApplication.js",[],[],"C:\\Users\\Connor\\Documents\\School\\University\\Third Year\\Team Project\\KV6002EsportsSociety\\website\\src\\components\\AdminFormWeeklyEvents.js",[],[],"C:\\Users\\Connor\\Documents\\School\\University\\Third Year\\Team Project\\KV6002EsportsSociety\\website\\src\\components\\AdminButtons.js",[],[],"C:\\Users\\Connor\\Documents\\School\\University\\Third Year\\Team Project\\KV6002EsportsSociety\\website\\src\\components\\AdminFormTeamAccolades.js",[],[],"C:\\Users\\Connor\\Documents\\School\\University\\Third Year\\Team Project\\KV6002EsportsSociety\\website\\src\\components\\TeamPlayers.js",["272"],[],"import React from \"react\";\r\nimport ProfilePic from \"../img/defaultprofilepicture.png\"\r\nimport { Tooltip, Box } from \"@mui/material\";\r\nimport { Link } from \"react-router-dom\"\r\n\r\n/**\r\n* PlayerTeams\r\n* \r\n* Creates a list of players in the team and returns it in component format. Uses the 'api/player' endpoint with a \r\n* teamid supplied in props to get the list. The players are displayed by their profile picture and are linked\r\n* back to the players profile.\r\n*\r\n* @author Connor Campbell W18003255\r\n* @collab\r\n*\r\n* @todo\r\n*/\r\n\r\nexport default class TeamPlayers extends React.Component {\r\n\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            results : []\r\n        }\r\n    }\r\n\r\n    /**\r\n    * componentDidMount()\r\n    * \r\n    * Ran when the page is initially loaded. In this case, data from the 'api/player' regarding \r\n    * the teamid supplied in props will be returned.\r\n    */\r\n   \r\n    componentDidMount() {\r\n        let url = \"http://unn-w18001798.newnumyspace.co.uk/KV6002/Assessment/api/player?team=\"\r\n        this.fetchData(url)\r\n    }\r\n\r\n    /**\r\n    * fetchData(url)\r\n    * \r\n    * Fetches API data from a given URL with a team ID appended. The data is stored in state.\r\n    */\r\n\r\n    fetchData = (url) => {\r\n        url += this.props.teamid\r\n        fetch(url)\r\n        .then( (response) => {\r\n            if (response.status === 200) {\r\n                return response.json() \r\n            } else {\r\n                throw Error(response.statusText);\r\n            }\r\n        })\r\n        .then( (data) => {\r\n            this.setState({results:data.results})\r\n        })\r\n        .catch ((err) => { \r\n            console.log(\"something went wrong \", err) \r\n        });\r\n    }\r\n\r\n    render() {\r\n        let noData = \"\" \r\n        if (this.state.results.length === 0) {\r\n            noData = <p>No data</p>\r\n        }\r\n\r\n        function makePlayerLink(id){\r\n            let link = \"../player/\" + id\r\n            return link\r\n        }\r\n\r\n        return(\r\n            <div>\r\n                 <Box sx={{display: 'flex', flexWrap: 'wrap', justifyContent: 'center',}}>\r\n                    {this.state.results.map( (player) => (\r\n                        <Box sx={{width:\"12%\", padding:1,}}>\r\n                            <Link to={makePlayerLink(player.user_id)}>\r\n                                <Tooltip title={player.user_ign}>\r\n                                    <img src={ProfilePic} className=\"profilepic\" style={{width:\"100%\", borderRadius: '5% 5% 5% 5%'}}/>\r\n                                </Tooltip>\r\n                            </Link>\r\n                        </Box>)\r\n                )}\r\n                {noData}\r\n                </Box>\r\n            </div>\r\n        )\r\n    }\r\n}","C:\\Users\\Connor\\Documents\\School\\University\\Third Year\\Team Project\\KV6002EsportsSociety\\website\\src\\components\\TeamStats.js",[],[],"C:\\Users\\Connor\\Documents\\School\\University\\Third Year\\Team Project\\KV6002EsportsSociety\\website\\src\\components\\TeamResults.js",["273","274"],[],"import React from \"react\";\r\nimport Table from '@mui/material/Table';\r\nimport TableBody from '@mui/material/TableBody';\r\nimport TableCell from '@mui/material/TableCell';\r\nimport TableContainer from '@mui/material/TableContainer';\r\nimport TableHead from '@mui/material/TableHead';\r\nimport TableRow from '@mui/material/TableRow';\r\nimport { Typography } from \"@mui/material\";\r\n\r\n\r\n/**\r\n* TeamResults\r\n* \r\n* Creates a list of the teams results and returns it in component format. Uses a teamid supplied in props to create a list\r\n* of results the player was involved in using the 'api/results' endpoint.\r\n*\r\n* @author Connor Campbell W18003255\r\n* @collab\r\n*\r\n* @todo\r\n*/\r\n\r\n\r\nexport default class TeamResults extends React.Component {\r\n\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            results : []\r\n        }\r\n    }\r\n\r\n    /**\r\n    * componentDidMount()\r\n    * \r\n    * Ran when the page is initially loaded. In this case, data from the 'api/team' regarding the teamid supplied in \r\n    * props will be returned.\r\n    */\r\n\r\n    componentDidMount() {\r\n        let url = \"http://unn-w18001798.newnumyspace.co.uk/KV6002/Assessment/api/results?team=\"\r\n        this.fetchData(url)\r\n    }\r\n\r\n    /**\r\n    * fetchData(url)\r\n    * \r\n    * Fetches API data from a given URL with a team ID appended. The data is stored in state.\r\n    */\r\n\r\n    fetchData = (url) => {\r\n        url += this.props.teamid\r\n        fetch(url)\r\n        .then( (response) => {\r\n            if (response.status === 200) {\r\n                return response.json() \r\n            } else {\r\n                throw Error(response.statusText);\r\n            }\r\n        })\r\n        .then( (data) => {\r\n            this.setState({results:data.results})\r\n        })\r\n        .catch ((err) => { \r\n            console.log(\"something went wrong \", err) \r\n        });\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        let noData = \"\" \r\n        if (this.state.results.length === 0) {\r\n            noData = <p>No data</p>\r\n        }\r\n\r\n        /**\r\n        * createData(date, opponent, result, matchid)\r\n        * \r\n        * Creates an array from the six variables given. This is to be used to make a row in a table.\r\n        *\r\n        * @param String $date           The date of the match.\r\n        * @param String $opponent       The opponent of the match.\r\n        * @param String $result         The result of the match.\r\n        * @param String $matchid        The id of the match.\r\n        * \r\n        * @returns Array\r\n        */\r\n        function createData(date, opponent, result, matchid) {\r\n            return { date, opponent, result, matchid };\r\n        }\r\n\r\n        /*\r\n        * Iterrates through the results and makes an array of the array of match data.\r\n        */\r\n        const rows = [\r\n        this.state.results.map( (result) => createData(result.match_date, result.match_opponent, result.match_outcome, result.match_id))\r\n        ];\r\n\r\n        return(\r\n            <div>\r\n                <TableContainer  sx={{maxHeight: 320}}>\r\n                    <Table stickyHeader>\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                <TableCell align=\"left\"><Typography>Date</Typography></TableCell>\r\n                                <TableCell align=\"left\"><Typography>Opponent&nbsp;</Typography></TableCell>\r\n                                <TableCell align=\"right\"><Typography>Result&nbsp;</Typography></TableCell>\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                        {this.state.results.map((result) => (\r\n                            <TableRow\r\n                            key={result.match_id}\r\n                            sx={{ '&:last-child td, &:last-child th': { border: 0 } }}\r\n                            >\r\n                            <TableCell align=\"left\"><Typography>{result.match_date}</Typography></TableCell>\r\n                            <TableCell align=\"left\"><Typography>{result.match_opponent}</Typography></TableCell>\r\n                            <TableCell align=\"right\"><Typography>{result.match_outcome}</Typography></TableCell>\r\n                            </TableRow>\r\n                        ))}\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n                {noData}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n//{this.state.results.map( (result) => result.match_opponent)}\r\n// result.match_date\r\n// result.match_opponent\r\n// result.match_outcome\r\n{/* <TableRow\r\nkey={row.name}\r\nsx={{ '&:last-child td, &:last-child th': { border: 0 } }}\r\n>\r\n<TableCell align=\"left\">{row.date}</TableCell>\r\n<TableCell align=\"left\">{row.opponent}</TableCell>\r\n<TableCell align=\"right\">{row.result}</TableCell>\r\n</TableRow> */}","C:\\Users\\Connor\\Documents\\School\\University\\Third Year\\Team Project\\KV6002EsportsSociety\\website\\src\\components\\FormLogin.js",[],[],"C:\\Users\\Connor\\Documents\\School\\University\\Third Year\\Team Project\\KV6002EsportsSociety\\website\\src\\components\\TeamAccolades.js",["275"],[],"import React from \"react\";\r\nimport Table from '@mui/material/Table';\r\nimport TableBody from '@mui/material/TableBody';\r\nimport TableCell from '@mui/material/TableCell';\r\nimport TableContainer from '@mui/material/TableContainer';\r\nimport TableHead from '@mui/material/TableHead';\r\nimport TableRow from '@mui/material/TableRow';\r\nimport { Typography } from \"@mui/material\";\r\n\r\n/**\r\n* TeamAccolades\r\n* \r\n* Creates the accolades list and returns it in component format. Uses the 'api/accolades' endpoint to get a teams accolades and\r\n* displays them in list format.\r\n*\r\n* @author Connor Campbell W18003255\r\n* @collab\r\n*\r\n* @todo\r\n*/\r\n\r\nexport default class TeamAccolades extends React.Component {\r\n\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            results : []\r\n        }\r\n    }\r\n\r\n    /**\r\n    * componentDidMount()\r\n    * \r\n    * Ran when the page is initially loaded. In this case, data from the 'api/accolades' regarding \r\n    * the teamid supplied in props will be returned.\r\n    */\r\n\r\n    componentDidMount() {\r\n        let url = \"http://unn-w18001798.newnumyspace.co.uk/KV6002/Assessment/api/accolades?team=\"\r\n        this.fetchData(url)\r\n    }\r\n\r\n    /**\r\n    * fetchData(url)\r\n    * \r\n    * Fetches API data from a given URL with a team ID appended. The data is stored in state.\r\n    */\r\n\r\n    fetchData = (url) => {\r\n        url += this.props.teamid\r\n        fetch(url)\r\n        .then( (response) => {\r\n            if (response.status === 200) {\r\n                return response.json() \r\n            } else {\r\n                throw Error(response.statusText);\r\n            }\r\n        })\r\n        .then( (data) => {\r\n            this.setState({results:data.results})\r\n        })\r\n        .catch ((err) => { \r\n            console.log(\"something went wrong \", err) \r\n        });\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        let noData = \"\" \r\n        /*\r\n        * If a team is yet you achieve no accolades, \"No Accolades Yet Achieved.\" will be displayed.\r\n        */\r\n        if (this.state.results.length === 0) {\r\n            noData = <p>No Accolades Yet Achieved.</p>\r\n        }\r\n\r\n        /**\r\n        * createData(accolade_name, accolade_id)\r\n        * \r\n        * Creates an array from the six variables given. This is to be used to make a row in a table.\r\n        *\r\n        * @param String $accolade_name      The name of the accolade.\r\n        * @param String $accolade_id        The id of the accolade.\r\n        * \r\n        * @returns Array\r\n        */\r\n        function createData(accolade_name, accolade_id) {\r\n            return { accolade_name, accolade_id };\r\n        }\r\n\r\n        /*\r\n        * Iterrates through the results and makes an array of the array of accolade data.\r\n        */\r\n        const rows = [\r\n        this.state.results.map( (result) => createData(result.accolade_name, result.accolade_id))\r\n        ];\r\n\r\n        return(\r\n            <div>\r\n                <TableContainer  sx={{maxHeight: 320}}>\r\n                    <Table>\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                <TableCell align=\"center\"><Typography>Accolades</Typography></TableCell>\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                        {this.state.results.map((result) => (\r\n                            <TableRow\r\n                            key={result.accolade_id}\r\n                            sx={{ '&:last-child td, &:last-child th': { border: 0 } }}\r\n                            >\r\n                            <TableCell align=\"left\"><Typography>{result.accolade_name}</Typography></TableCell>\r\n                            </TableRow>\r\n                        ))}\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n                {noData}\r\n            </div>\r\n        )\r\n    }\r\n}","C:\\Users\\Connor\\Documents\\School\\University\\Third Year\\Team Project\\KV6002EsportsSociety\\website\\src\\components\\EditTeamPage.js",["276","277"],[],"import React from \"react\";\r\nimport { Typography } from \"@mui/material\";\r\nimport jwt_decode from \"jwt-decode\";\r\nimport EditTeamForm from \"./EditTeamForm\";\r\nimport Helmet from \"react-helmet\";\r\n\r\n/**\r\n* EditTeamPage\r\n* \r\n* This page will submit team data to the database to allow team leads to edit team details.\r\n*\r\n* @author Connor Campbell W18003255\r\n* @collab\r\n*\r\n* @todo -Fix bug with the teams's current info not being added to the fields by default.\r\n*/\r\n\r\nexport default class EditTeamPage extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            user_id:\"\",\r\n            lead_id:\"\",\r\n            isAdmin:\"\",\r\n            name:\"\",\r\n            results:[],\r\n            sucess: \"\"\r\n        }\r\n        this.handleName = this.handleName.bind(this);\r\n        this.handleSubmitClick = this.handleSubmitClick.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (localStorage.getItem('UserLoginToken')) {\r\n            let decodedToken = jwt_decode(localStorage.getItem(\"UserLoginToken\"))\r\n            this.setState({\r\n                user_id: decodedToken.user_id,\r\n                isAdmin: decodedToken.user_isAdmin\r\n            })\r\n        }\r\n        let url = \"http://unn-w18001798.newnumyspace.co.uk/KV6002/Assessment/api/team?id=\"\r\n        this.fetchData(url)\r\n    }\r\n\r\n    /**\r\n    * handle--\r\n    * \r\n    * Used to submit form data to the state for future use.\r\n    */\r\n    \r\n\r\n    handleName = (e) => {\r\n        this.setState({ name: e.target.value })\r\n    }    \r\n\r\n    /**\r\n    * handleSubmitClick()\r\n    * \r\n    * When the submit button is clicked, the state data is taken and submitted to the 'api/editteam' endpoint in order to update the\r\n    * team data with data from the state.\r\n    */\r\n    \r\n    handleSubmitClick = () => {\r\n        let url = \"http://unn-w18001798.newnumyspace.co.uk/KV6002/Assessment/api/editteam\"\r\n\r\n        let formData = new FormData();\r\n        formData.append('id', this.props.teamid);\r\n        formData.append('name', this.state.name);\r\n        \r\n        if (this.state.name === null){\r\n            this.setState({ message: \"Please fill all required fields.\" })\r\n        } else {\r\n            fetch(url, {\r\n            method: 'POST',\r\n            headers: new Headers(),\r\n            body: formData\r\n        })\r\n            .then((response) => {\r\n                if ((response.status === 200) || (response.status === 204)) {\r\n                    this.setState(\r\n                        {\r\n                            success: true,\r\n                            message: \"Details Successfully Updated\"\r\n                        }\r\n                    )\r\n                    console.log(\"Team Name Changed.\")\r\n                } else if (this.state.email === null) {\r\n                    this.setState({ error: \"Please enter a team name.\" })\r\n                } \r\n            })\r\n            .catch((err) => {\r\n                console.log(\"something went wrong \", err)\r\n            }\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n    * fetchData(url)\r\n    * \r\n    * Fetches API data from a given URL with a team ID appended. The data is stored in state.\r\n    */\r\n\r\n    fetchData = (url) => {\r\n        url += this.props.teamid\r\n        fetch(url)\r\n        .then( (response) => {\r\n            if (response.status === 200) {\r\n                return response.json() \r\n            } else {\r\n                throw Error(response.statusText);\r\n            }\r\n        })\r\n        .then( (data) => {\r\n            this.setState({results:data.results})\r\n        })\r\n        .catch ((err) => { \r\n            console.log(\"something went wrong \", err) \r\n        });\r\n    }\r\n\r\n   render() {\r\n    let teamLead;\r\n    let teamName;\r\n    let message = this.state.message;\r\n\r\n    this.state.results.map( (team) => teamLead = team.team_lead)\r\n    this.state.results.map( (team) => teamName = team.team_name)\r\n\r\n        /*\r\n        * Checks if the user is the leader of the team attemting to be editted, or is an admin. If \r\n        * they are neither, they will not be able to interact with the page.\r\n        */\r\n       if(this.state.user_id == teamLead || this.state.isAdmin == 1){\r\n        return(\r\n            <div>\r\n                <Helmet>\r\n                    <title>Edit Team</title>\r\n                </Helmet>\r\n                <Typography variant=\"h1\" align=\"center\">\r\n                    {teamName}\r\n                </Typography>\r\n                <Typography variant=\"h2\">\r\n                    Edit Page\r\n                </Typography>\r\n                <EditTeamForm\r\n                    teamid={this.props.teamid}\r\n                    teamName={teamName}\r\n                    handleName={this.handleName}\r\n                    handleSubmitClick={this.handleSubmitClick}\r\n                />\r\n                {message}\r\n            </div>\r\n        )\r\n       } else {\r\n           return(\r\n            <Typography>\r\n                You do not have access to this page.\r\n            </Typography>\r\n           )\r\n       }\r\n    }\r\n}\r\n","C:\\Users\\Connor\\Documents\\School\\University\\Third Year\\Team Project\\KV6002EsportsSociety\\website\\src\\components\\PlayerPage.js",["278","279","280","281","282","283","284","285"],[],"import React from \"react\";\r\nimport TeamPlayers from \"./TeamPlayers\"\r\nimport PlayerResults from \"./PlayerResults\"\r\nimport PlayerStats from \"./PlayerStats\"\r\nimport PlayerTeams from \"./PlayerTeams\"\r\nimport PlayerAccolades from \"./PlayerAccolades\"\r\nimport { Box, Grid, Typography, Button } from \"@mui/material\";\r\nimport ProfilePic from \"../img/defaultprofilepicture.png\"\r\nimport List from '@mui/material/List';\r\nimport ListItem from '@mui/material/ListItem';\r\nimport { FaInstagram, FaTwitter, FaTwitch } from \"react-icons/fa\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { TwitchEmbed } from \"react-twitch-embed\";\r\nimport { TwitterTimelineEmbed } from \"react-twitter-embed\";\r\nimport jwt_decode from \"jwt-decode\";\r\nimport Helmet from \"react-helmet\";\r\n\r\n\r\n/**\r\n* PlayerPage\r\n* \r\n* Creates a player page and returns it in component format. Uses a playerid supplied in props to create a profile\r\n* for the player. Uses the 'api/player' endpoint to get information on the player, and the PlayerResults, PlayerStats\r\n* PlayerTeams and PlayerAccolades components to display information.\r\n*\r\n* @author Connor Campbell W18003255\r\n* @collab\r\n*\r\n* @todo\r\n*/\r\n\r\n\r\nexport default class PlayerPage extends React.Component {\r\n\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            results : []\r\n        }\r\n    }\r\n\r\n    /**\r\n    * componentDidMount()\r\n    * \r\n    * Ran when the page is initially loaded. In this case, data from the 'api/player' regarding \r\n    * the playerid supplied in props will be returned.\r\n    */\r\n\r\n    componentDidMount() {\r\n        let url = \"http://unn-w18001798.newnumyspace.co.uk/KV6002/Assessment/api/player?id=\"\r\n        this.fetchData(url)\r\n    }\r\n\r\n    /**\r\n    * fetchData(url)\r\n    * \r\n    * Fetches API data from a given URL with a player ID appended. The data is stored in state.\r\n    */\r\n\r\n    fetchData = (url) => {\r\n        url += this.props.playerid\r\n        fetch(url)\r\n        .then( (response) => {\r\n            if (response.status === 200) {\r\n                return response.json() \r\n            } else {\r\n                throw Error(response.statusText);\r\n            }\r\n        })\r\n        .then( (data) => {\r\n            this.setState({results:data.results})\r\n        })\r\n        .catch ((err) => { \r\n            console.log(\"something went wrong \", err) \r\n        });\r\n    }\r\n\r\n    makeEditPath = (id) => {\r\n        return \"../editplayer/\" + id\r\n    }\r\n\r\n    render() {\r\n        let playerIGN;\r\n        let playerName;\r\n        let playerBio;\r\n        let playerTwitch;\r\n        let playerTwitter;\r\n        let playerInstagram;\r\n        \r\n\r\n        let twitchPopout;\r\n        let twitterPopout;\r\n\r\n        let twitter;\r\n        let twitch;\r\n        let instagram;\r\n\r\n        let editButton = \"\"\r\n\r\n        this.state.results.map( (player) => playerIGN = player.user_ign)\r\n        this.state.results.map( (player) => playerName = (player.user_firstName + \" \" + player.user_lastName))\r\n        this.state.results.map( (player) => playerBio = player.user_bio)\r\n        this.state.results.map( (player) => playerTwitch = player.user_twitch)\r\n        this.state.results.map( (player) => playerTwitter = player.user_twitter)\r\n        this.state.results.map( (player) => playerInstagram = player.user_instagram)\r\n\r\n        /*\r\n        * Checking for player socials, if they have them links to them will be provided in the top right\r\n        * of the page. If the website has a popout component available, such as twitch and twitter, these\r\n        * will also be included.\r\n        */\r\n\r\n        if(playerTwitter) {\r\n            let twitterlink = \"https://www.twitter.com/\" + playerTwitter + \"/\";\r\n            twitterPopout = (\r\n                <TwitterTimelineEmbed\r\n                sourceType=\"profile\"\r\n                screenName={playerTwitter}\r\n                options={{height: 480, width: \"100%\", theme: 'dark'}}\r\n                \r\n            />\r\n            )\r\n            twitter = (\r\n                <a href={twitterlink} target=\"_blank\">\r\n                    <Typography variant=\"h4\">\r\n                        <FaTwitter/> /{playerTwitter}\r\n                    </Typography>\r\n                </a>\r\n            )\r\n        }\r\n\r\n        if(playerTwitch) {\r\n            let twitchlink = \"https://www.twitch.tv/\" + playerTwitch + \"/\";\r\n            twitchPopout = (\r\n                <TwitchEmbed\r\n                width=\"100%\"\r\n                height = \"480px\"\r\n                channel={playerTwitch}\r\n                id={playerTwitch}\r\n                theme=\"dark\"\r\n                muted />\r\n            )\r\n            twitch = (\r\n                <a href={twitchlink} target=\"_blank\">\r\n                    <Typography variant=\"h4\">\r\n                        <FaTwitch/> /{playerTwitch}\r\n                    </Typography>\r\n                </a>\r\n            )\r\n        }\r\n\r\n        if(playerInstagram) {\r\n            let iglink = \"https://www.instagram.com/\" + playerInstagram + \"/\";\r\n            instagram = (\r\n                <a href={iglink} target=\"_blank\">\r\n                    <Box>\r\n                        <Typography variant=\"h4\">\r\n                            <FaInstagram/> /{playerInstagram}\r\n                        </Typography>\r\n                    </Box>\r\n                </a>\r\n            )\r\n        }\r\n\r\n        /*\r\n        * Checks if the player is on their own page or an admin, if either of these is true an edit page\r\n        * button will be displayed linking to the page for editing user profiles.\r\n        */\r\n\r\n        if(localStorage.getItem(\"UserLoginToken\")) {\r\n            let decodedToken = jwt_decode(localStorage.getItem(\"UserLoginToken\"))\r\n            if(decodedToken.user_isAdmin == 1 || decodedToken.user_id == this.props.playerid) {\r\n                editButton = (\r\n                    <Link to={this.makeEditPath(this.props.playerid)}>\r\n                        <Button size=\"large\" sx={{backgroundColor:\"#D5761D\",color: 'white', display: 'block'}}>                        \r\n                            <Typography variant=\"h6\">\r\n                                Edit Page\r\n                            </Typography>\r\n                        </Button>\r\n                    </Link>\r\n                )\r\n            }\r\n        }\r\n\r\n        return(\r\n            <Box sx={{marginBottom:2, paddingLeft:3,paddingRight:3,marginLeft: 10,marginRight:10, paddingTop:2, paddingBottom:4,}}>                        \r\n            <Helmet>\r\n                <title>{playerIGN}</title>\r\n            </Helmet>\r\n            <Box sx={{paddingTop:2,paddingBottom:3}}>\r\n                <Grid container spacing={2} sx={{paddingLeft:2}}>\r\n                    <img src={ProfilePic} className=\"profliepic\"/>\r\n                    <Box sx={{paddingTop: \"2.5%\", paddingLeft: 2, textAlign:\"left\", display: \"block\"}}>\r\n                        <Typography variant=\"h1\">\r\n                            {playerIGN}\r\n                        </Typography>\r\n                        <Typography variant=\"h2\">\r\n                            {playerName}\r\n                        </Typography>\r\n                    </Box>\r\n                    <Box sx={{display: 'block', marginLeft: \"auto\", marginRight: 2}}>\r\n                        <Box sx={{display: 'block', marginLeft: \"auto\", marginRight: 2}}>\r\n                            {editButton}\r\n                        </Box>\r\n                        <List>\r\n                            <ListItem>\r\n                                {twitter}\r\n                            </ListItem>\r\n                            <ListItem>\r\n                                {twitch}\r\n                            </ListItem>\r\n                            <ListItem>\r\n                                {instagram}\r\n                            </ListItem>\r\n                        </List>\r\n                    </Box>\r\n                </Grid>\r\n            </Box>\r\n            <Grid container spacing={5}>\r\n                <Grid item xs={8}>\r\n                    <Box sx={{backgroundColor:\"#424242\", borderRadius: '10px 10px 10px 10px', border: \"3px solid #D5761D\", height: \"100%\"}}>\r\n                        <Typography sx={{padding:2}}>\r\n                            {playerBio}\r\n                        </Typography>\r\n                    </Box>\r\n                </Grid>\r\n                <Grid item xs={4}>\r\n                <Box sx={{backgroundColor:\"#424242\", borderRadius: '10px 10px 10px 10px', border: \"3px solid #D5761D\", height: \"100%\",paddingLeft:1, paddingRight:1,}}>\r\n                    <PlayerResults playerid={this.props.playerid}/>\r\n                </Box>\r\n                </Grid>\r\n                <Grid item xs={4}>\r\n                    <Box sx={{backgroundColor:\"#424242\", borderRadius: '10px 10px 10px 10px', border: \"3px solid #D5761D\", height: \"100%\",paddingLeft:1, paddingRight:1,}}>\r\n                        <PlayerTeams playerid={this.props.playerid}/>\r\n                    </Box>\r\n                </Grid>\r\n                <Grid item xs={4}>\r\n                <Box sx={{backgroundColor:\"#424242\", borderRadius: '10px 10px 10px 10px', border: \"3px solid #D5761D\", height: \"100%\",paddingLeft:1, paddingRight:1,}}>\r\n                    <PlayerStats playerid={this.props.playerid}/>\r\n                </Box>\r\n                </Grid>\r\n                <Grid item xs={4}>\r\n                <Box sx={{backgroundColor:\"#424242\", borderRadius: '10px 10px 10px 10px', border: \"3px solid #D5761D\", height: \"100%\",paddingLeft:1, paddingRight:1,}}>\r\n                    <PlayerAccolades playerid={this.props.playerid}/>\r\n                </Box>\r\n                </Grid>\r\n                <Grid item xs={8}>\r\n                    {twitchPopout}\r\n                </Grid>\r\n                <Grid item xs={4}>\r\n                    {twitterPopout}\r\n                </Grid>\r\n            </Grid>\r\n            </Box>\r\n        )\r\n    }\r\n}\r\n\r\n{/* <Grid container spacing={2}>\r\n<Grid item sx={8}>\r\n    <Box>\r\n        <TeamPlayers teamid=\"7\"/>\r\n    </Box>\r\n</Grid>\r\n<Grid item sx={2}>\r\n    <Box xs={{width:\"100%\", backgroundColor:\"red\"}}>testtse</Box>\r\n</Grid>\r\n</Grid> */}","C:\\Users\\Connor\\Documents\\School\\University\\Third Year\\Team Project\\KV6002EsportsSociety\\website\\src\\components\\EditPlayerPage.js",["286","287","288","289","290","291","292","293"],[],"import React from \"react\";\r\nimport { Typography } from \"@mui/material\";\r\nimport jwt_decode from \"jwt-decode\";\r\nimport { TextField, Box, Button } from \"@mui/material\";\r\nimport { Link } from \"react-router-dom\";\r\nimport EditPlayerForm from \"./EditPlayerForm\";\r\nimport Uploady from \"@rpldy/uploady\";\r\nimport UploadButton from \"@rpldy/upload-button\";\r\nimport Helmet from \"react-helmet\";\r\n\r\n\r\n\r\n/**\r\n* EditPlayerPage\r\n* \r\n* This page will submit player data to the database to allow players to edit their profile and \r\n* account details.\r\n*\r\n* @author Connor Campbell W18003255\r\n* @collab\r\n*\r\n* @todo -Fix bug with player's current info not being added to the fields by default.\r\n*/\r\n\r\n    \r\n\r\n\r\n\r\nexport default class EditPlayerPage extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            user_id:\"\",\r\n            isAdmin:\"\",\r\n            newEmail:\"\",\r\n            newign: \"\",\r\n            newFirstName:\"\",\r\n            newLastName:\"\",\r\n            newTwitch:\"\",\r\n            newTwitter:\"\",\r\n            newInstagram:\"\",\r\n            newPicture:\"\",\r\n            results:[],\r\n            sucess: \"\"\r\n        }\r\n        this.handleEmail = this.handleEmail.bind(this);\r\n        this.handleIGN = this.handleIGN.bind(this);\r\n        this.handleFirstName = this.handleFirstName.bind(this);\r\n        this.handleLastName = this.handleLastName.bind(this);\r\n        this.handleTwitch = this.handleTwitch.bind(this);\r\n        this.handleTwitter = this.handleTwitter.bind(this);\r\n        this.handleInstagram = this.handleInstagram.bind(this);\r\n        this.handleSubmitClick = this.handleSubmitClick.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (localStorage.getItem('UserLoginToken')) {\r\n            let decodedToken = jwt_decode(localStorage.getItem(\"UserLoginToken\"))\r\n            this.setState({\r\n                user_id: decodedToken.user_id,\r\n                isAdmin: decodedToken.user_isAdmin\r\n            })\r\n        }\r\n        let url = \"http://unn-w18001798.newnumyspace.co.uk/KV6002/Assessment/api/player?id=\"\r\n        this.fetchData(url)\r\n\r\n    }\r\n\r\n    filterBySize = (file) => {\r\n        //filter out images larger than 5MB\r\n        return file.size <= 5242880;\r\n      };\r\n    \r\n    /**\r\n    * handle--\r\n    * \r\n    * Used to submit form data to the state for future use.\r\n    */\r\n    \r\n\r\n    handleEmail = (e) => {\r\n        this.setState({ newEmail: e.target.value })\r\n    }    \r\n    handleIGN = (e) => {\r\n        this.setState({ newign: e.target.value })\r\n    }    \r\n    handleFirstName = (e) => {\r\n        this.setState({ newFirstName: e.target.value })\r\n    }    \r\n    handleLastName = (e) => {\r\n        this.setState({ newLastName: e.target.value })\r\n    }    \r\n    handleTwitch = (e) => {\r\n        this.setState({ newTwitch: e.target.value })\r\n    }    \r\n    handleTwitter = (e) => {\r\n        this.setState({ newTwitter: e.target.value })\r\n    }    \r\n    handleInstagram = (e) => {\r\n        this.setState({ newInstagram: e.target.value })\r\n    }    \r\n\r\n    /**\r\n    * handleSubmitClick()\r\n    * \r\n    * When the submit button is clicked, the state data is taken and submitted to the 'api/editplayer' endpoint in order to update the\r\n    * player data with data from the state. If any of the mandatory fields are left empty, the data will not be submitted.\r\n    */\r\n    \r\n    \r\n    handleSubmitClick = () => {\r\n        let url = \"http://unn-w18001798.newnumyspace.co.uk/KV6002/Assessment/api/editplayer\"\r\n\r\n        let formData = new FormData();\r\n        formData.append('email', this.state.newEmail);\r\n        formData.append('ign', this.state.newign);\r\n        formData.append('first', this.state.newFirstName);\r\n        formData.append('last', this.state.newLastName);\r\n        formData.append('twitch', this.state.newTwitch);\r\n        formData.append('twitter', this.state.newTwitter);\r\n        formData.append('instagram', this.state.newInstagram);\r\n        formData.append('id', this.props.playerid);\r\n\r\n        if (this.state.email === null || !this.state.ign === null  || !this.state.firstName === null  || !this.state.lastName === null ) {\r\n            this.setState({ message: \"Please fill all required fields.\" })\r\n        } else {\r\n            fetch(url, {\r\n                method: 'POST',\r\n                headers: new Headers(),\r\n                body: formData\r\n            })\r\n                .then((response) => {\r\n                        if ((response.status === 200) || (response.status === 204)) {\r\n                            this.setState(\r\n                                {\r\n                                    success: true,\r\n                                    message: \"Details Successfully Updated\"\r\n                                }\r\n                            )\r\n                    }\r\n                })\r\n                .catch((err) => {\r\n                    console.log(\"something went wrong \", err)\r\n                }\r\n                );\r\n        }\r\n        }\r\n        \r\n    /**\r\n    * fetchData(url)\r\n    * \r\n    * Fetches API data from a given URL with a player ID appended. The data is stored in state.\r\n    */\r\n\r\n    fetchData = (url) => {\r\n        url += this.props.playerid\r\n        fetch(url)\r\n        .then( (response) => {\r\n            if (response.status === 200) {\r\n                return response.json() \r\n            } else {\r\n                throw Error(response.statusText);\r\n            }\r\n        })\r\n        .then( (data) => {\r\n            this.setState({results:data.results})\r\n        })\r\n        .catch ((err) => { \r\n            console.log(\"something went wrong \", err) \r\n        });\r\n    }\r\n\r\n   render() {\r\n    let playerEmail;\r\n    let playerIGN;\r\n    let playerFirstName;\r\n    let playerLastName;\r\n    let playerTwitch;\r\n    let playerTwitter;\r\n    let playerInstagram;\r\n\r\n    let message = this.state.message\r\n\r\n    this.state.results.map( (player) => (playerEmail = player.user_email))\r\n    this.state.results.map( (player) => (playerIGN = player.user_ign))\r\n    this.state.results.map( (player) => (playerFirstName = player.user_firstName))\r\n    this.state.results.map( (player) => (playerLastName = player.user_lastName))\r\n    this.state.results.map( (player) => (playerTwitch = player.user_twitch))\r\n    this.state.results.map( (player) => (playerTwitter = player.user_twitter))\r\n    this.state.results.map( (player) => (playerInstagram = player.user_instagram))\r\n\r\n    console.log(playerIGN)\r\n\r\n        /*\r\n        * Checks if the user is attempting to edit their own profile, or is an admin. If \r\n        * they are neither, they will not be able to interact with the page.\r\n        */\r\n       if(this.state.user_id == this.props.playerid || this.state.isAdmin == 1){\r\n        return(\r\n            <div>\r\n                <Helmet>\r\n                <title>Edit Player</title>\r\n                </Helmet>\r\n                <Typography variant=\"h1\" align=\"center\">\r\n                    {playerIGN}\r\n                </Typography>\r\n                <Typography variant=\"h2\">\r\n                    Edit Page\r\n                </Typography>\r\n                <EditPlayerForm\r\n                    playerid={this.props.playerid}\r\n                    playerEmail={playerEmail}\r\n                    handleEmail={this.handleEmail}\r\n                    playerIGN={playerIGN}\r\n                    handleIGN={this.handleIGN}\r\n                    playerFirstName={playerFirstName}\r\n                    handleFirstName={this.handleFirstName}\r\n                    playerLastName={playerLastName}\r\n                    handleLastName={this.handleLastName}\r\n                    playerTwitch={playerTwitch}\r\n                    handleTwitch={this.handleTwitch}\r\n                    playerTwitter={playerTwitter}\r\n                    handleTwitter={this.handleTwitter}\r\n                    playerInstagram={playerInstagram}\r\n                    handleInstagram={this.handleInstagram}\r\n\r\n                    handleSubmitClick={this.handleSubmitClick}\r\n                />\r\n                <Typography>{message}</Typography>\r\n            </div>\r\n        )\r\n       } else {\r\n           return(\r\n            <Typography>\r\n                You do not have access to this page.\r\n            </Typography>\r\n           )\r\n       }\r\n    }\r\n}\r\n","C:\\Users\\Connor\\Documents\\School\\University\\Third Year\\Team Project\\KV6002EsportsSociety\\website\\src\\components\\ResultsPage.js",["294","295"],[],"import React from \"react\";\r\nimport ResultsTable from \"./ResultsTable\";\r\nimport { Timeline } from 'react-twitter-widgets';\r\nimport { FacebookProvider, Page } from 'react-facebook';\r\nimport InstagramFeed from 'react-ig-feed';\r\nimport AdminResultsForm from \"./AdminResultsForm\";\r\nimport Helmet from \"react-helmet\";\r\n\r\n/**\r\n* ResultsPage\r\n* \r\n* Creates a results page using the ResultTable component. Features a brief description\r\nabout the table along with widgets to display various social sites that also provide match\r\nresults for users.\r\n*\r\n* @author Jacob Clark w18003237\r\n* @collab\r\n*\r\n* @todo sort out access tokens\r\n*/\r\n\r\n\r\nclass ResultsPage extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"resultsWrapper\">\r\n                <Helmet>\r\n                    <title>Results</title>\r\n                </Helmet>\r\n\r\n                <div className=\"main\">\r\n                    <h1>Game Results</h1>\r\n                    <p>Check out the latest results across all of our different teams inclduing information on opponents, dates, games and of course scoring. The table can be filtered using the toolbar at the top to search through all the matches played.</p>\r\n                </div>\r\n\r\n                <div className=\"rTable\">\r\n                    <h2>Results Table</h2>\r\n                    <ResultsTable />\r\n                </div>\r\n\r\n\r\n                <div className=\"socials\">\r\n                    <p>Stay updated with the latest information by following the Northumbria Vikings socials where weekly results are also posted.</p>\r\n                </div>\r\n\r\n                <div className=\"twitterFeed\">\r\n                    <Timeline\r\n                        dataSource={{\r\n                            sourceType: 'profile',\r\n                            screenName: 'NorthumbriaGG'\r\n                        }}\r\n                        options={{\r\n                            height: '600',\r\n                            theme: 'dark'\r\n                        }}\r\n                    />\r\n                </div>\r\n\r\n                {/* Need to configure access tokens for these socials in order for them to be displayed properly*/}\r\n                \r\n                \r\n                <div className=\"fbPage\">\r\n                    <FacebookProvider appId=\"123456789\">\r\n                        <Page href=\"https://www.facebook.com/NorthumbriaESports\" tabs=\"timeline\" />\r\n                    </FacebookProvider>\r\n                </div>\r\n\r\n                {/*\r\n                <div className=\"insta\">\r\n                    <InstagramFeed token=\"684773662810417\" counter=\"6\" />\r\n                    </div>*/}\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ResultsPage;\r\n","C:\\Users\\Connor\\Documents\\School\\University\\Third Year\\Team Project\\KV6002EsportsSociety\\website\\src\\components\\AllTeamsPage.js",[],[],"C:\\Users\\Connor\\Documents\\School\\University\\Third Year\\Team Project\\KV6002EsportsSociety\\website\\src\\components\\FormRegister.js",[],[],"C:\\Users\\Connor\\Documents\\School\\University\\Third Year\\Team Project\\KV6002EsportsSociety\\website\\src\\components\\PlayerStats.js",[],[],"C:\\Users\\Connor\\Documents\\School\\University\\Third Year\\Team Project\\KV6002EsportsSociety\\website\\src\\components\\EditTeamForm.js",[],[],"C:\\Users\\Connor\\Documents\\School\\University\\Third Year\\Team Project\\KV6002EsportsSociety\\website\\src\\components\\PlayerResults.js",["296"],[],"import React from \"react\";\r\nimport Table from '@mui/material/Table';\r\nimport TableBody from '@mui/material/TableBody';\r\nimport TableCell from '@mui/material/TableCell';\r\nimport TableContainer from '@mui/material/TableContainer';\r\nimport TableHead from '@mui/material/TableHead';\r\nimport TableRow from '@mui/material/TableRow';\r\nimport { Typography, Box } from \"@mui/material\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\n\r\n/**\r\n* PlayerResults\r\n* \r\n* Creates a list of player results and returns it in component format. Uses a playerid supplied in props to create a list\r\n* of results the player was involved in using the 'api/results' endpoint.\r\n*\r\n* @author Connor Campbell W18003255\r\n* @collab\r\n*\r\n* @todo\r\n*/\r\n\r\n\r\nexport default class PlayerResults extends React.Component {\r\n\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            results : []\r\n        }\r\n    }\r\n\r\n    /**\r\n    * componentDidMount()\r\n    * \r\n    * Ran when the page is initially loaded. In this case, data from the 'api/player' regarding  the playerid supplied in \r\n    * props will be returned.\r\n    */\r\n\r\n    componentDidMount() {\r\n        let url = \"http://unn-w18001798.newnumyspace.co.uk/KV6002/Assessment/api/results?player=\"\r\n        this.fetchData(url)\r\n    }\r\n\r\n    /**\r\n    * fetchData(url)\r\n    * \r\n    * Fetches API data from a given URL with a player ID appended. The data is stored in state.\r\n    */\r\n\r\n    fetchData = (url) => {\r\n        url += this.props.playerid\r\n        fetch(url)\r\n        .then( (response) => {\r\n            if (response.status === 200) {\r\n                return response.json() \r\n            } else {\r\n                throw Error(response.statusText);\r\n            }\r\n        })\r\n        .then( (data) => {\r\n            this.setState({results:data.results})\r\n        })\r\n        .catch ((err) => { \r\n            console.log(\"something went wrong \", err) \r\n        });\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        let noData = \"\"         \r\n        /*\r\n        * If the player was in no matches, \"No data.\" will be displayed.\r\n        */\r\n        if (this.state.results.length === 0) {\r\n            noData = <p>No data</p>\r\n        }\r\n\r\n        /**\r\n        * createData(date, opponent, result, matchid, team_name, match_teamId)\r\n        * \r\n        * Creates an array from the six variables given. This is to be used to make a row in a table.\r\n        *\r\n        * @param String $date               The date of the match.\r\n        * @param String $opponent           The opponent of the match.\r\n        * @param String $result             The result of the match.\r\n        * @param String $matchid            The id of the match.\r\n        * @param String $team_name          The name of the team playing the match.\r\n        * @param String $match_teamId       The id of the team playing.\r\n        * \r\n        * @returns Array\r\n        */\r\n\r\n        function createData(date, opponent, result, matchid, team_name, match_teamId) {\r\n            return { date, opponent, result, matchid, team_name,match_teamId };\r\n        }\r\n\r\n        /*\r\n        * Iterrates through the results and makes an array of the array of match data.\r\n        */\r\n\r\n        const rows = [\r\n        this.state.results.map( (result) => createData(result.match_date, result.match_opponent, result.match_outcome, result.match_id, result.team_name, result.match_teamId))\r\n        ];\r\n\r\n        function makeTeamLink(id) {\r\n            return \"../team/\" + id\r\n        }\r\n\r\n        return(\r\n            <div>\r\n                <TableContainer  sx={{maxHeight: 320}}>\r\n                    <Table stickyHeader >\r\n                        <TableHead sx={{ backgroundColor: 'red' }} >\r\n                            <TableRow >\r\n                                <TableCell align=\"left\"><Typography>Date</Typography></TableCell>\r\n                                <TableCell align=\"left\"><Typography>Team</Typography></TableCell>\r\n                                <TableCell align=\"left\"><Typography>Opponent&nbsp;</Typography></TableCell>\r\n                                <TableCell align=\"right\"><Typography>Result&nbsp;</Typography></TableCell>\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                        {this.state.results.map((result) => (\r\n                            <TableRow\r\n                            key={result.match_id}\r\n                            sx={{ '&:last-child td, &:last-child th': { border: 0 } }}\r\n                            >\r\n                            <TableCell align=\"left\"><Typography>{result.match_date}</Typography></TableCell>\r\n                            <TableCell align=\"left\"><Link to={makeTeamLink(result.match_teamId)}><Box><Typography>{result.team_name}</Typography></Box></Link></TableCell>\r\n                            <TableCell align=\"left\"><Typography>{result.match_opponent}</Typography></TableCell>\r\n                            <TableCell align=\"right\"><Typography>{result.match_outcome}</Typography></TableCell>\r\n                            </TableRow>\r\n                        ))}\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n                {noData}\r\n            </div>\r\n        )\r\n    }\r\n}","C:\\Users\\Connor\\Documents\\School\\University\\Third Year\\Team Project\\KV6002EsportsSociety\\website\\src\\components\\PlayerTeams.js",["297"],[],"import React from \"react\";\r\nimport Table from '@mui/material/Table';\r\nimport TableBody from '@mui/material/TableBody';\r\nimport TableCell from '@mui/material/TableCell';\r\nimport TableContainer from '@mui/material/TableContainer';\r\nimport TableHead from '@mui/material/TableHead';\r\nimport TableRow from '@mui/material/TableRow';\r\nimport { Typography, Box } from \"@mui/material\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\n\r\n/**\r\n* PlayerTeams\r\n* \r\n* Creates a list of teams that the player is in and returns it in component format. Uses the 'api/team' endpoint with a \r\n* playerid supplied in props to get the list.\r\n*\r\n* @author Connor Campbell W18003255\r\n* @collab\r\n*\r\n* @todo\r\n*/\r\n\r\nexport default class PlayerTeams extends React.Component {\r\n\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            results : []\r\n        }\r\n    }\r\n\r\n    /**\r\n    * componentDidMount()\r\n    * \r\n    * Ran when the page is initially loaded. In this case, data from the 'api/team' regarding \r\n    * the playerid supplied in props will be returned.\r\n    */\r\n\r\n    componentDidMount() {\r\n        let url = \"http://unn-w18001798.newnumyspace.co.uk/KV6002/Assessment/api/team?player=\"\r\n        this.fetchData(url)\r\n    }\r\n\r\n    /**\r\n    * fetchData(url)\r\n    * \r\n    * Fetches API data from a given URL with a player ID appended. The data is stored in state.\r\n    */\r\n\r\n    fetchData = (url) => {\r\n        url += this.props.playerid\r\n        fetch(url)\r\n        .then( (response) => {\r\n            if (response.status === 200) {\r\n                return response.json() \r\n            } else {\r\n                throw Error(response.statusText);\r\n            }\r\n        })\r\n        .then( (data) => {\r\n            this.setState({results:data.results})\r\n        })\r\n        .catch ((err) => { \r\n            console.log(\"something went wrong \", err) \r\n        });\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        /**\r\n        * createData(team_name, team_id, game_name)\r\n        * \r\n        * Creates an array from the three variables given. This is to be used to make a row in a table.\r\n        *\r\n        * @param String $team_name   The name of the team.\r\n        * @param String $team_id   The id of the team\r\n        * @param String $game_name   The name of the game the team plays.\r\n        * \r\n        * @returns Array\r\n        */\r\n        \r\n        function createData(team_name, team_id, game_name) {\r\n            return { team_name, team_id, game_name };\r\n        }\r\n\r\n        /*\r\n        * Iterrates through the results and makes an array of the array of match data.\r\n        */\r\n        const rows = [\r\n        this.state.results.map( (result) => createData(result.team_name, result.team_id, result.game_name))\r\n        ];\r\n\r\n        function makeTeamLink(id) {\r\n            return \"../team/\" + id\r\n        }\r\n\r\n        return(\r\n            <div>\r\n                <TableContainer  sx={{maxHeight: 320}}>\r\n                    <Table>\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                <TableCell align=\"center\" colSpan={2}><Typography>Teams</Typography></TableCell>\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                        {this.state.results.map((result) => (\r\n                            <TableRow\r\n                            key={result.team_id}\r\n                            sx={{ '&:last-child td, &:last-child th': { border: 0 } }}\r\n                            >\r\n                            <TableCell align=\"left\"><Link to={makeTeamLink(result.team_id)}><Box><Typography>{result.team_name}</Typography></Box></Link></TableCell>\r\n                            <TableCell align=\"right\"><Typography>{result.game_name}</Typography></TableCell>\r\n                            </TableRow>\r\n                        ))}\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n            </div>\r\n        )\r\n    }\r\n}","C:\\Users\\Connor\\Documents\\School\\University\\Third Year\\Team Project\\KV6002EsportsSociety\\website\\src\\components\\SearchBox.js",[],[],"C:\\Users\\Connor\\Documents\\School\\University\\Third Year\\Team Project\\KV6002EsportsSociety\\website\\src\\components\\PlayerAccolades.js",["298"],[],"import React from \"react\";\r\nimport Table from '@mui/material/Table';\r\nimport TableBody from '@mui/material/TableBody';\r\nimport TableCell from '@mui/material/TableCell';\r\nimport TableContainer from '@mui/material/TableContainer';\r\nimport TableHead from '@mui/material/TableHead';\r\nimport TableRow from '@mui/material/TableRow';\r\nimport { Typography } from \"@mui/material\";\r\n\r\n\r\n/**\r\n* PlayerAccolades\r\n* \r\n* Creates the accolades list and returns it in component format. Uses the 'api/accolades' endpoint to get a players accolades and\r\n* displays them in list format.\r\n*\r\n* @author Connor Campbell W18003255\r\n* @collab\r\n*\r\n* @todo\r\n*/\r\n\r\n\r\nexport default class PlayerAccolades extends React.Component {\r\n\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            results : []\r\n        }\r\n    }\r\n\r\n    /**\r\n    * componentDidMount()\r\n    * \r\n    * Ran when the page is initially loaded. In this case, data from the 'api/accolades' regarding \r\n    * the playerid supplied in props will be returned.\r\n    */\r\n\r\n    componentDidMount() {\r\n        let url = \"http://unn-w18001798.newnumyspace.co.uk/KV6002/Assessment/api/accolades?player=\"\r\n        this.fetchData(url)\r\n    }\r\n\r\n    /**\r\n    * fetchData(url)\r\n    * \r\n    * Fetches API data from a given URL with a player ID appended. The data is stored in state.\r\n    */\r\n\r\n    fetchData = (url) => {\r\n        url += this.props.playerid\r\n        fetch(url)\r\n        .then( (response) => {\r\n            if (response.status === 200) {\r\n                return response.json() \r\n            } else {\r\n                throw Error(response.statusText);\r\n            }\r\n        })\r\n        .then( (data) => {\r\n            this.setState({results:data.results})\r\n        })\r\n        .catch ((err) => { \r\n            console.log(\"something went wrong \", err) \r\n        });\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        let noData = \"\"\r\n        /*\r\n        * If a player is yet you achieve no accolades, \"No Accolades Yet Achieved.\" will be displayed.\r\n        */ \r\n        if (this.state.results.length === 0) {\r\n            noData = <p>No Accolades Yet Achieved.</p>\r\n        }\r\n\r\n        function createData(accolade_name, accolade_id) {\r\n            return { accolade_name, accolade_id };\r\n        }\r\n\r\n        const rows = [\r\n        this.state.results.map( (result) => createData(result.accolade_name, result.accolade_id))\r\n        ];\r\n\r\n        return(\r\n            <div>\r\n                <TableContainer  sx={{maxHeight: 320}}>\r\n                    <Table>\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                <TableCell align=\"center\"><Typography>Accolades</Typography></TableCell>\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                        {this.state.results.map((result) => (\r\n                            <TableRow\r\n                            key={result.accolade_id}\r\n                            sx={{ '&:last-child td, &:last-child th': { border: 0 } }}\r\n                            >\r\n                            <TableCell align=\"left\"><Typography>{result.accolade_name}</Typography></TableCell>\r\n                            </TableRow>\r\n                        ))}\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n                {noData}\r\n            </div>\r\n        )\r\n    }\r\n}","C:\\Users\\Connor\\Documents\\School\\University\\Third Year\\Team Project\\KV6002EsportsSociety\\website\\src\\components\\EditPlayerForm.js",[],[],["299","300"],"C:\\Users\\Connor\\Documents\\School\\University\\Third Year\\Team Project\\KV6002EsportsSociety\\website\\src\\components\\AdminFormTeamApplicationDetails.js",[],[],"C:\\Users\\Connor\\Documents\\School\\University\\Third Year\\Team Project\\KV6002EsportsSociety\\website\\src\\components\\Teams.js",["301","302"],[],"\r\n/**\r\n * teams Class\r\n *\r\n * @team Harry Laws w19024957\r\n */\r\n \r\n import React from \"react\";\r\n import Team from \"./Team.js\";\r\nclass Teams extends React.Component {\r\n\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            results : []\r\n            \r\n        }\r\n        console.log(\"constructor\")\r\n    }\r\n    \r\n    componentDidMount() {\r\n        const url = \"http://unn-w18001798.newnumyspace.co.uk/KV6002/Assessment/api/team\"\r\n\r\n        let formData = new FormData();\r\n        formData.append('team_name', this.state.team_name);\r\n        formData.append('team_game', this.state.team_game)\r\n\r\n        if (this.props.id !== undefined) {\r\n          url += \"?id=\" + this.props.id\r\n          console.log(url)\r\n      }\r\n\r\n        fetch(url)\r\n          .then( (response) => {\r\n              if (response.status === 200) {\r\n                return response.json() \r\n              } else {\r\n                throw Error(response.statusText);\r\n              }\r\n          })\r\n          .then( (data) => {\r\n            this.setState({results:data.results})\r\n          })\r\n          .catch ((err) => { \r\n            console.log(\"something went wrong \", err) \r\n          });\r\n    }\r\n\r\n    filterSearch = (s) => {\r\n    return s.team_name.toLowerCase().includes(this.props.search.toLowerCase())\r\n }\r\n\r\n    \r\n      render() {\r\n        let noData = \"\" \r\n        if (this.state.results.length === 0) {\r\n            noData = <p>No data</p>\r\n        }\r\n       let filteredResults = this.state.results\r\n\r\n        if ((filteredResults.length > 0) && (this.props.search !== undefined)) {\r\n          filteredResults = filteredResults.filter(this.filterSearch) \r\n      }\r\n        return (\r\n            <div>\r\n                {filteredResults.map( (team, i) => (<Team key={team.team_name} team={team}/>) )}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Teams;\r\n/** \r\n\r\nclass Teams{\r\n\r\n    constructor(){\r\n\r\n    }\r\n\r\n    testFunc() {\r\n        console.log(this.record);\r\n    }\r\n}\r\n>>>*/\r\n","C:\\Users\\Connor\\Documents\\School\\University\\Third Year\\Team Project\\KV6002EsportsSociety\\website\\src\\components\\JoinTeamSubmissionForm.js",[],[],"C:\\Users\\Connor\\Documents\\School\\University\\Third Year\\Team Project\\KV6002EsportsSociety\\website\\src\\components\\TeamSubmissionForm.js",[],[],"C:\\Users\\Connor\\Documents\\School\\University\\Third Year\\Team Project\\KV6002EsportsSociety\\website\\src\\components\\AdminFormJoinTeamDetails.js",[],[],"C:\\Users\\Connor\\Documents\\School\\University\\Third Year\\Team Project\\KV6002EsportsSociety\\website\\src\\components\\ResultsTable.js",["303"],[],"import React from \"react\";\r\nimport { DataGrid, GridToolbar } from '@mui/x-data-grid';\r\n\r\n/**\r\n * Results Table Component\r\n * \r\n * Uses the MUI datagrid compononent to render and display result data provided by the     \r\n * results api. The table can filtered and searched through using the filter options \r\n * provided by the component in the toolbar. Currently limited to one filter at a time.\r\n *\r\n * @author Jacob Clark w18003237\r\n * \r\n * \r\n * @todo consider adding custom filters such as winning matches\r\n */\r\n\r\nclass ResultsTable extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            results: []\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        let url = \"http://unn-w18001798.newnumyspace.co.uk/KV6002/Assessment/api/results\"\r\n        this.fetchData(url)\r\n    }\r\n\r\n    /**\r\n    * componentDidMount()\r\n    * \r\n    * Ran when the page is initially loaded. In this case, data from the 'api/results'  \r\n    * will be returned.\r\n    */\r\n\r\n\r\n    fetchData = (url) => {\r\n        fetch(url)\r\n            .then((response) => {\r\n                if (response.status === 200) {\r\n                    return response.json()\r\n                } else {\r\n                    throw Error(response.statusText);\r\n                }\r\n            })\r\n            .then((data) => {\r\n                this.setState({ results: data.results })\r\n            })\r\n            .catch((err) => {\r\n                console.log(\"something went wrong \", err)\r\n            });\r\n    }\r\n\r\n    /**\r\n    * fetchData(url)\r\n    * \r\n    * Fetches API data from a given URL. The data is stored in state.\r\n    */\r\n\r\n    render() {\r\n        let noData = \"\"\r\n        if (this.state.results.length === 0) {\r\n            noData = <p>No data</p>\r\n        }\r\n        \r\n        function createData(id, teamname, opponent, date, result, game) {\r\n            return { id, teamname, opponent, date, result, game };\r\n        }\r\n\r\n        /*\r\n        * Checks data length before creating an an array to store the different variables \r\n        * supplied. \r\n        * \r\n        */\r\n\r\n        const columns = [\r\n            //{ field: 'id', headerName: 'ID', width: 70 },\r\n            { field: 'teamname', headerName: 'Team Name', width: 400 },\r\n            { field: 'opponent', headerName: 'Opponent', width: 400 },\r\n            { field: 'game', headerName: 'Game', width: 400 },\r\n            { field: 'date', headerName: 'Match Date', width: 300 },\r\n            { field: 'result', headerName: 'Match Outcome', width: 200 }\r\n        ];\r\n\r\n        \r\n\r\n        const rows =\r\n            this.state.results.map((result) => createData(result.match_id, result.team_name, result.match_opponent, result.match_date, result.match_outcome, result.game_name))\r\n            ;\r\n\r\n\r\n        console.log(rows)\r\n\r\n        return (\r\n\r\n            <div style={{ width: '100%' }}>\r\n                <DataGrid\r\n                    components={{ Toolbar: GridToolbar }}\r\n                    autoHeight\r\n                    rows={rows}\r\n                    columns={columns}\r\n                    pageSize={10}\r\n                    rowsPerPageOptions={[10]}\r\n                    sx={{backgroundColor:\"#424242\", border: 2, borderColor: '#D5761D',}}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default ResultsTable","C:\\Users\\Connor\\Documents\\School\\University\\Third Year\\Team Project\\KV6002EsportsSociety\\website\\src\\components\\Team.js",[],[],"C:\\Users\\Connor\\Documents\\School\\University\\Third Year\\Team Project\\KV6002EsportsSociety\\website\\src\\components\\WeeklyEventsPage.js",["304","305","306","307"],[],"import React from \"react\";\r\nimport WeeklyEvents from \"./WeeklyEvents.js\"\r\nimport TwitchStream from \"./TwitchStream.js\";\r\nimport Helmet from \"react-helmet\";\r\n\r\nclass WeeklyEventsPage extends React.Component {\r\nrender(){\r\n    return(\r\n    \r\n    <html>\r\n        <head>\r\n\r\n        </head>\r\n            <Helmet>\r\n                <title>Events</title>\r\n            </Helmet>\r\n            <body>\r\n            <h1>WEEKLY EVENTS AND NEWS</h1>\r\n            <div className=\"news\">\r\n\r\n                <h2>News Item 1:</h2>\r\n                <img src=\"https://pbs.twimg.com/profile_banners/1052178284170145794/1569603900/1500x500\" \r\n                width=\"330\" \r\n                height=\"125\" />\r\n                <p>Any geeks can help other geeks by writing\r\n                articles on the GeeksforGeeks, publishing\r\n                articles follow few steps that are Articles\r\n                that need little modification/improvement\r\n                from reviewers are published first.</p>\r\n\r\n                <h2>News Item 2:</h2>\r\n                <img src=\"https://pbs.twimg.com/profile_banners/1052178284170145794/1569603900/1500x500\" \r\n                width=\"330\" \r\n                height=\"125\" />\r\n                <p>Any geeks can help other geeks by writing\r\n                articles on the GeeksforGeeks, publishing\r\n                articles follow few steps that are Articles\r\n                that need little modification/improvement\r\n                from reviewers are published first.</p>\r\n\r\n                <h2>News Item 3:</h2>\r\n                <img src=\"https://pbs.twimg.com/profile_banners/1052178284170145794/1569603900/1500x500\" \r\n                width=\"330\" \r\n                height=\"125\" />\r\n                <p>Any geeks can help other geeks by writing\r\n                articles on the GeeksforGeeks, publishing\r\n                articles follow few steps that are Articles\r\n                that need little modification/improvement\r\n                from reviewers are published first.</p>\r\n\r\n                <h2>News Item 4:</h2>\r\n                <img src=\"https://pbs.twimg.com/profile_banners/1052178284170145794/1569603900/1500x500\" \r\n                width=\"330\" \r\n                height=\"125\" />\r\n                <p>Any geeks can help other geeks by writing\r\n                articles on the GeeksforGeeks, publishing\r\n                articles follow few steps that are Articles\r\n                that need little modification/improvement\r\n                from reviewers are published first.</p>\r\n            </div>\r\n            <TwitchStream/>\r\n            <h2>CURRENT AND UPCOMING EVENTS</h2>\r\n            <WeeklyEvents/>\r\n        </body>\r\n    </html>\r\n\r\n    )\r\n}\r\n}\r\n\r\n\r\nexport default WeeklyEventsPage;\r\n","C:\\Users\\Connor\\Documents\\School\\University\\Third Year\\Team Project\\KV6002EsportsSociety\\website\\src\\components\\WeeklyEvents.js",["308"],[],"import React from \"react\";\r\nimport WeeklyEvent from \"./WeeklyEvent\";\r\nclass WeeklyEvents extends React.Component {\r\n\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            results : []\r\n\r\n        }\r\n        console.log(\"constructor\")\r\n    }\r\n\r\n    componentDidMount() {\r\n        const url = \"http://unn-w18001798.newnumyspace.co.uk/KV6002/Assessment/api/events\"\r\n\r\n        fetch(url)\r\n          .then( (response) => {\r\n              if (response.status === 200) {\r\n                return response.json() \r\n              } else {\r\n                throw Error(response.statusText);\r\n              }\r\n          })\r\n          .then( (data) => {\r\n            this.setState({results:data.results})\r\n          })\r\n          .catch ((err) => { \r\n            console.log(\"something went wrong \", err) \r\n          });\r\n    }\r\n\r\n    render() {\r\n      let noData = \"\" \r\n      if (this.state.results.length === 0) {\r\n          noData = <p>No data</p>\r\n      }\r\n      const filteredResults = this.state.results\r\n      return (\r\n          <div>\r\n              {filteredResults.map( (events, i) => (<WeeklyEvent key={i} events={events}/>) )}\r\n          </div>\r\n      )\r\n  }\r\n}\r\n\r\nexport default WeeklyEvents;\r\n","C:\\Users\\Connor\\Documents\\School\\University\\Third Year\\Team Project\\KV6002EsportsSociety\\website\\src\\components\\TwitchStream.js",["309","310","311"],[],"import React from \"react\";\r\nimport { TwitchChat, TwitchClip, TwitchEmbed,TwitchPlayer } from \"react-twitch-embed\";\r\n\r\nexport default class TwitchStream extends React.Component {\r\n    render() {\r\n        return(\r\n    <div className=\"streamcontainer\">    \r\n        <div className=\"streamplayer\">\r\n            <TwitchEmbed channel=\"northumbria_esports\" id=\"northumbria_esports\" muted />\r\n        </div>\r\n    </div> \r\n        )\r\n    }\r\n}","C:\\Users\\Connor\\Documents\\School\\University\\Third Year\\Team Project\\KV6002EsportsSociety\\website\\src\\components\\WeeklyEvent.js",[],[],"C:\\Users\\Connor\\Documents\\School\\University\\Third Year\\Team Project\\KV6002EsportsSociety\\website\\src\\components\\AdminResultsForm.js",[],[],"C:\\Users\\Connor\\Documents\\School\\University\\Third Year\\Team Project\\KV6002EsportsSociety\\website\\src\\components\\Footer.js",["312","313","314","315","316","317"],[],"import { Typography } from \"@mui/material\";\r\nimport { Box } from \"@mui/system\";\r\nimport { FaInstagram, FaTwitter, FaTwitch, FaFacebook, FaDiscord } from \"react-icons/fa\";\r\nimport { IconContext } from \"react-icons\";\r\nimport { Divider } from \"@mui/material\";\r\n\r\nfunction Footer(){\r\n    return(\r\n    <Box sx={{marginLeft:20, marginRight:20, paddingTop:1 }}>\r\n        <Divider style={{ background: '#D5761D' }}/>\r\n            <Box  sx={{justifyContent: 'center', x:2,paddingTop:2, paddingBottom:2}} >\r\n                <IconContext.Provider\r\n                    value={{ color: '#827C74', size: '50px', paddingLeft:100 }}\r\n                >\r\n               <a href=\"https://www.instagram.com/northumbriagg/\" target=\"_blank\"><FaInstagram /></a> \r\n               <a href=\"https://twitter.com/NorthumbriaGG\" target=\"_blank\"><FaTwitter /> </a>\r\n               <a href=\"https://www.facebook.com/NorthumbriaESports\" target=\"_blank\"><FaDiscord /></a>\r\n               <a href=\"https://twitch.tv/northumbria_esports\" target=\"_blank\"><FaTwitch /></a>\r\n               <a href=\"https://www.facebook.com/NorthumbriaESports\" target=\"_blank\"><FaFacebook /></a>\r\n                </IconContext.Provider>\r\n            </Box>\r\n    </Box>\r\n    )\r\n}\r\n\r\nexport default Footer;",{"ruleId":"318","replacedBy":"319"},{"ruleId":"320","replacedBy":"321"},{"ruleId":"322","severity":1,"message":"323","line":6,"column":23,"nodeType":"324","messageId":"325","endLine":6,"endColumn":27},{"ruleId":"322","severity":1,"message":"326","line":8,"column":8,"nodeType":"324","messageId":"325","endLine":8,"endColumn":18},{"ruleId":"322","severity":1,"message":"327","line":9,"column":8,"nodeType":"324","messageId":"325","endLine":9,"endColumn":12},{"ruleId":"328","severity":1,"message":"329","line":72,"column":38,"nodeType":"330","messageId":"331","endLine":72,"endColumn":40},{"ruleId":"318","replacedBy":"332"},{"ruleId":"320","replacedBy":"333"},{"ruleId":"328","severity":1,"message":"329","line":90,"column":42,"nodeType":"330","messageId":"331","endLine":90,"endColumn":44},{"ruleId":"328","severity":1,"message":"329","line":90,"column":71,"nodeType":"330","messageId":"331","endLine":90,"endColumn":73},{"ruleId":"334","severity":1,"message":"335","line":110,"column":21,"nodeType":"336","endLine":110,"endColumn":118},{"ruleId":"322","severity":1,"message":"337","line":2,"column":8,"nodeType":"324","messageId":"325","endLine":2,"endColumn":13},{"ruleId":"322","severity":1,"message":"338","line":3,"column":8,"nodeType":"324","messageId":"325","endLine":3,"endColumn":17},{"ruleId":"322","severity":1,"message":"339","line":4,"column":8,"nodeType":"324","messageId":"325","endLine":4,"endColumn":17},{"ruleId":"322","severity":1,"message":"340","line":5,"column":8,"nodeType":"324","messageId":"325","endLine":5,"endColumn":22},{"ruleId":"322","severity":1,"message":"341","line":6,"column":8,"nodeType":"324","messageId":"325","endLine":6,"endColumn":17},{"ruleId":"322","severity":1,"message":"342","line":7,"column":8,"nodeType":"324","messageId":"325","endLine":7,"endColumn":16},{"ruleId":"322","severity":1,"message":"343","line":8,"column":10,"nodeType":"324","messageId":"325","endLine":8,"endColumn":20},{"ruleId":"322","severity":1,"message":"344","line":4,"column":8,"nodeType":"324","messageId":"325","endLine":4,"endColumn":18},{"ruleId":"328","severity":1,"message":"329","line":105,"column":43,"nodeType":"330","messageId":"331","endLine":105,"endColumn":45},{"ruleId":"328","severity":1,"message":"329","line":110,"column":48,"nodeType":"330","messageId":"331","endLine":110,"endColumn":50},{"ruleId":"334","severity":1,"message":"335","line":82,"column":37,"nodeType":"336","endLine":82,"endColumn":135},{"ruleId":"322","severity":1,"message":"345","line":96,"column":15,"nodeType":"324","messageId":"325","endLine":96,"endColumn":19},{"ruleId":"346","severity":1,"message":"347","line":134,"column":1,"nodeType":"348","messageId":"349","endLine":141,"endColumn":16},{"ruleId":"322","severity":1,"message":"345","line":95,"column":15,"nodeType":"324","messageId":"325","endLine":95,"endColumn":19},{"ruleId":"328","severity":1,"message":"329","line":135,"column":30,"nodeType":"330","messageId":"331","endLine":135,"endColumn":32},{"ruleId":"328","severity":1,"message":"329","line":135,"column":64,"nodeType":"330","messageId":"331","endLine":135,"endColumn":66},{"ruleId":"322","severity":1,"message":"350","line":2,"column":8,"nodeType":"324","messageId":"325","endLine":2,"endColumn":19},{"ruleId":"351","severity":1,"message":"352","line":124,"column":17,"nodeType":"336","messageId":"353","endLine":124,"endColumn":55,"fix":"354"},{"ruleId":"351","severity":1,"message":"352","line":144,"column":17,"nodeType":"336","messageId":"353","endLine":144,"endColumn":54,"fix":"355"},{"ruleId":"351","severity":1,"message":"352","line":155,"column":17,"nodeType":"336","messageId":"353","endLine":155,"endColumn":50,"fix":"356"},{"ruleId":"328","severity":1,"message":"329","line":172,"column":42,"nodeType":"330","messageId":"331","endLine":172,"endColumn":44},{"ruleId":"328","severity":1,"message":"329","line":172,"column":71,"nodeType":"330","messageId":"331","endLine":172,"endColumn":73},{"ruleId":"334","severity":1,"message":"335","line":192,"column":21,"nodeType":"336","endLine":192,"endColumn":67},{"ruleId":"346","severity":1,"message":"347","line":259,"column":1,"nodeType":"348","messageId":"349","endLine":268,"endColumn":12},{"ruleId":"322","severity":1,"message":"357","line":4,"column":10,"nodeType":"324","messageId":"325","endLine":4,"endColumn":19},{"ruleId":"322","severity":1,"message":"358","line":4,"column":21,"nodeType":"324","messageId":"325","endLine":4,"endColumn":24},{"ruleId":"322","severity":1,"message":"359","line":4,"column":26,"nodeType":"324","messageId":"325","endLine":4,"endColumn":32},{"ruleId":"322","severity":1,"message":"323","line":5,"column":10,"nodeType":"324","messageId":"325","endLine":5,"endColumn":14},{"ruleId":"322","severity":1,"message":"360","line":7,"column":8,"nodeType":"324","messageId":"325","endLine":7,"endColumn":15},{"ruleId":"322","severity":1,"message":"361","line":8,"column":8,"nodeType":"324","messageId":"325","endLine":8,"endColumn":20},{"ruleId":"328","severity":1,"message":"329","line":199,"column":30,"nodeType":"330","messageId":"331","endLine":199,"endColumn":32},{"ruleId":"328","severity":1,"message":"329","line":199,"column":75,"nodeType":"330","messageId":"331","endLine":199,"endColumn":77},{"ruleId":"322","severity":1,"message":"362","line":5,"column":8,"nodeType":"324","messageId":"325","endLine":5,"endColumn":21},{"ruleId":"322","severity":1,"message":"363","line":6,"column":8,"nodeType":"324","messageId":"325","endLine":6,"endColumn":24},{"ruleId":"322","severity":1,"message":"345","line":104,"column":15,"nodeType":"324","messageId":"325","endLine":104,"endColumn":19},{"ruleId":"322","severity":1,"message":"345","line":91,"column":15,"nodeType":"324","messageId":"325","endLine":91,"endColumn":19},{"ruleId":"322","severity":1,"message":"345","line":84,"column":15,"nodeType":"324","messageId":"325","endLine":84,"endColumn":19},{"ruleId":"318","replacedBy":"364"},{"ruleId":"320","replacedBy":"365"},{"ruleId":"366","severity":1,"message":"367","line":29,"column":11,"nodeType":"324","messageId":"368","endLine":29,"endColumn":14},{"ruleId":"322","severity":1,"message":"369","line":57,"column":13,"nodeType":"324","messageId":"325","endLine":57,"endColumn":19},{"ruleId":"322","severity":1,"message":"369","line":65,"column":13,"nodeType":"324","messageId":"325","endLine":65,"endColumn":19},{"ruleId":"334","severity":1,"message":"335","line":22,"column":17,"nodeType":"336","endLine":24,"endColumn":32},{"ruleId":"334","severity":1,"message":"335","line":32,"column":17,"nodeType":"336","endLine":34,"endColumn":32},{"ruleId":"334","severity":1,"message":"335","line":42,"column":17,"nodeType":"336","endLine":44,"endColumn":32},{"ruleId":"334","severity":1,"message":"335","line":52,"column":17,"nodeType":"336","endLine":54,"endColumn":32},{"ruleId":"322","severity":1,"message":"369","line":36,"column":11,"nodeType":"324","messageId":"325","endLine":36,"endColumn":17},{"ruleId":"322","severity":1,"message":"370","line":2,"column":10,"nodeType":"324","messageId":"325","endLine":2,"endColumn":20},{"ruleId":"322","severity":1,"message":"371","line":2,"column":22,"nodeType":"324","messageId":"325","endLine":2,"endColumn":32},{"ruleId":"322","severity":1,"message":"372","line":2,"column":46,"nodeType":"324","messageId":"325","endLine":2,"endColumn":58},{"ruleId":"322","severity":1,"message":"343","line":1,"column":10,"nodeType":"324","messageId":"325","endLine":1,"endColumn":20},{"ruleId":"351","severity":1,"message":"352","line":15,"column":16,"nodeType":"336","messageId":"353","endLine":15,"endColumn":83,"fix":"373"},{"ruleId":"351","severity":1,"message":"352","line":16,"column":16,"nodeType":"336","messageId":"353","endLine":16,"endColumn":76,"fix":"374"},{"ruleId":"351","severity":1,"message":"352","line":17,"column":16,"nodeType":"336","messageId":"353","endLine":17,"endColumn":86,"fix":"375"},{"ruleId":"351","severity":1,"message":"352","line":18,"column":16,"nodeType":"336","messageId":"353","endLine":18,"endColumn":80,"fix":"376"},{"ruleId":"351","severity":1,"message":"352","line":19,"column":16,"nodeType":"336","messageId":"353","endLine":19,"endColumn":86,"fix":"377"},"no-native-reassign",["378"],"no-negated-in-lhs",["379"],"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'ProfilePic' is defined but never used.","'Logo' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",["378"],["379"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'Table' is defined but never used.","'TableBody' is defined but never used.","'TableCell' is defined but never used.","'TableContainer' is defined but never used.","'TableHead' is defined but never used.","'TableRow' is defined but never used.","'Typography' is defined but never used.","'jwt_decode' is defined but never used.","'rows' is assigned a value but never used.","no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock","'TeamPlayers' is defined but never used.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" (which implies rel=\"noopener\") is a security risk in older browsers: see https://mathiasbynens.github.io/rel-noopener/#recommendations","noTargetBlankWithoutNoreferrer",{"range":"380","text":"381"},{"range":"382","text":"381"},{"range":"383","text":"381"},"'TextField' is defined but never used.","'Box' is defined but never used.","'Button' is defined but never used.","'Uploady' is defined but never used.","'UploadButton' is defined but never used.","'InstagramFeed' is defined but never used.","'AdminResultsForm' is defined but never used.",["378"],["379"],"no-const-assign","'url' is constant.","const","'noData' is assigned a value but never used.","'TwitchChat' is defined but never used.","'TwitchClip' is defined but never used.","'TwitchPlayer' is defined but never used.",{"range":"384","text":"381"},{"range":"385","text":"381"},{"range":"386","text":"381"},{"range":"387","text":"381"},{"range":"388","text":"381"},"no-global-assign","no-unsafe-negation",[4007,4007]," rel=\"noreferrer\"",[4648,4648],[5022,5022],[718,718],[815,815],[920,920],[1018,1018],[1121,1121]]