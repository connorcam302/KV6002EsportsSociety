{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Owner\\\\Documents\\\\Github\\\\KV6002EsportsSociety\\\\website\\\\src\\\\components\\\\LoginRegisterPage.js\";\nimport React from \"react\";\nimport FormLogin from \"./FormLogin\";\nimport FormRegister from \"./FormRegister\";\nimport jwt_decode from \"jwt-decode\";\nimport Typography from '@mui/material/Typography';\nimport Grid from '@mui/material/Grid';\nimport { Box } from \"@mui/system\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass LoginRegisterPage extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleEmail = e => {\n      this.setState({\n        email: e.target.value\n      });\n    };\n\n    this.handlePassword = e => {\n      this.setState({\n        password: e.target.value\n      });\n    };\n\n    this.handlefirstName = e => {\n      this.setState({\n        userFirst: e.target.value\n      });\n    };\n\n    this.handlelastName = e => {\n      this.setState({\n        userLast: e.target.value\n      });\n    };\n\n    this.handleUserIGN = e => {\n      this.setState({\n        userign: e.target.value\n      });\n    };\n\n    this.handleRegisterState = () => {\n      this.setState({\n        loginpage: false,\n        registerpage: true\n      });\n    };\n\n    this.handleLoginState = () => {\n      this.setState({\n        loginpage: true,\n        registerpage: false\n      });\n    };\n\n    this.handleLoginClick = () => {\n      let url = \"http://unn-w18001798.newnumyspace.co.uk/KV6002/Assessment/api/userlogin\";\n      let formData = new FormData();\n      formData.append('user_email', this.state.email);\n      formData.append('user_password', this.state.password);\n      fetch(url, {\n        method: 'POST',\n        headers: new Headers(),\n        body: formData\n      }).then(response => {\n        if (response.status === 200) {\n          //If the status code of the webpage is 200, perform the login function from the API.\n          return response.json();\n        } else if (response.status === 401) {\n          //If the status code of the webpage is 401, display an error saying the details collected are incorrect.\n          this.setState({\n            error: \"The email address or password you have entered are not correct, please try again!\"\n          });\n        }\n      }).then(data => {\n        //Using the data collected from a successful login, store the data in a Java Web Token to be used on the webpage and set the boolean 'user' to true.\n        if (\"token\" in data.results) {\n          this.setState({\n            user: true,\n            token: data.results.token\n          });\n          localStorage.setItem('UserLoginToken', data.results.token); //Store the Token within the Browser's local storage.\n        }\n      }).catch(err => {\n        console.log(\"something went wrong \", err);\n      });\n    };\n\n    this.handleRegisterClick = () => {\n      let url = \"http://unn-w18001798.newnumyspace.co.uk/KV6002/Assessment/api/register\";\n      let formData = new FormData();\n      formData.append('user_email', this.state.email);\n      formData.append('user_password', this.state.password);\n      formData.append('user_ign', this.state.userign);\n      formData.append('user_firstName', this.state.userFirst);\n      formData.append('user_lastName', this.state.userLast);\n      fetch(url, {\n        method: 'POST',\n        headers: new Headers(),\n        body: formData\n      }).then(response => {\n        if (response.status === 200 || response.status === 204) {\n          this.setState({\n            registered: true\n          });\n          return response.json();\n        } else if (response.status === 406) {\n          this.setState({\n            error: \"The email address or password you have entered is not acceptable.\"\n          });\n        } else if (response.status === 403) {\n          this.setState({\n            error: \"The email address you have entered already exists, please try another email address.\"\n          });\n        }\n\n        if (this.state.email == ' ') {\n          this.setState({\n            error: \".\"\n          });\n        }\n      }).catch(err => {\n        console.log(\"something went wrong \", err);\n      });\n    };\n\n    this.state = {\n      user: false,\n      admin: false,\n      registered: false,\n      registerpage: false,\n      token: null,\n      email: \"\",\n      password: \"\",\n      userign: \"\",\n      userFirst: \"\",\n      userLast: \"\",\n      error: \"\"\n    };\n    this.handleEmail = this.handleEmail.bind(this);\n    this.handlePassword = this.handlePassword.bind(this);\n    this.handlefirstName = this.handlefirstName.bind(this);\n    this.handlelastName = this.handlelastName.bind(this);\n    this.handleUserIGN = this.handleUserIGN.bind(this);\n    this.handleLoginClick = this.handleLoginClick.bind(this);\n    this.handleRegisterClick = this.handleRegisterClick.bind(this);\n    this.handleRegisterState = this.handleRegisterState.bind(this);\n    this.handleLoginState = this.handleLoginState.bind(this);\n  }\n\n  componentDidMount() {\n    if (localStorage.getItem('UserLoginToken')) {\n      let decodedToken = jwt_decode(localStorage.getItem(\"UserLoginToken\"));\n      this.setState({\n        user: true,\n        token: localStorage.getItem('myReadingListToken')\n      });\n\n      if (decodedToken.user_isAdmin = 1) {\n        this.setState({\n          admin: true\n        });\n      }\n    }\n  }\n  /**\r\n  * handleEmail(e)\r\n  * \r\n  * Handles the input and change of text within the email field used with the register and login pages.\r\n  *\r\n  */\n\n\n  /**\r\n   * \r\n   * @returns {Page} - Will display the rendered page content based on the conditions required.\r\n   */\n  render() {\n    let errorMessage = this.state.error;\n    /**\r\n     * Default page presented upon accessing the page, will display standard login page.\r\n     * Is also accessed should a user press the 'Already have an account? Log in here!' link on the register page.\r\n     */\n\n    let page = /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        flexGrow: 1\n      },\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 2,\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            sx: {\n              fontSize: 30,\n              fontWeight: 500\n            },\n            children: \"Login\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 262,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            sx: {\n              fontSize: 24,\n              fontWeight: 350\n            },\n            children: \"Please enter your details to log into your account!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 265,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 261,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 4\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 269,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 4,\n          sx: {\n            justifyContent: 'center'\n          },\n          children: [/*#__PURE__*/_jsxDEV(FormLogin, {\n            handleEmail: this.handleEmail,\n            handlePassword: this.handlePassword,\n            handleLoginClick: this.handleLoginClick,\n            handleRegisterState: this.handleRegisterState\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 272,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"errorMessage\",\n              children: errorMessage\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 278,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 278,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 271,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 4\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 280,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 13\n    }, this);\n    /**\r\n     * The content required for the Register page, will be displayed if user presses the 'Don't have an account? register one here!' link on the Login page.\r\n     */\n\n\n    if (this.state.registerpage) {\n      page = /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          flexGrow: 1\n        },\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          spacing: 2,\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              sx: {\n                fontSize: 30,\n                fontWeight: 500\n              },\n              children: \"Register\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 295,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              sx: {\n                fontSize: 24,\n                fontWeight: 350\n              },\n              children: \"Please enter your details below to register your account!\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 298,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 294,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 4\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 302,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 4,\n            sx: {\n              justifyContent: 'center'\n            },\n            children: [/*#__PURE__*/_jsxDEV(FormRegister, {\n              handlefirstName: this.handlefirstName,\n              handlelastName: this.handlelastName,\n              handleUserIGN: this.handleUserIGN,\n              handleEmail: this.handleEmail,\n              handlePassword: this.handlePassword,\n              handleRegisterClick: this.handleRegisterClick,\n              handleLoginState: this.handleLoginState\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 305,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n              children: /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"errorMessage\",\n                children: errorMessage\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 314,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 314,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 304,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 4\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 316,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 293,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 292,\n        columnNumber: 17\n      }, this);\n    }\n    /**\r\n     * Secondary login page content, displayed only when a user performs a successfuly account registration.\r\n     */\n\n\n    if (this.state.registered) {\n      page = /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          flexGrow: 1\n        },\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          spacing: 2,\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              sx: {\n                fontSize: 30,\n                fontWeight: 500\n              },\n              children: \"Your details have been successfully registered!\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 331,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              sx: {\n                fontSize: 24,\n                fontWeight: 350\n              },\n              children: \"Please enter your details below to log into your account!\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 334,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 330,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 4\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 338,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 4,\n            sx: {\n              justifyContent: 'center'\n            },\n            children: [/*#__PURE__*/_jsxDEV(FormLogin, {\n              handleEmail: this.handleEmail,\n              handlePassword: this.handlePassword,\n              handleLoginClick: this.handleLoginClick\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 341,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n              children: /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"errorMessage\",\n                children: errorMessage\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 346,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 346,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 340,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 4\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 348,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 329,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 328,\n        columnNumber: 17\n      }, this);\n    }\n    /**\r\n     * Content to be displayed if a user has successfully logged into their account.\r\n     */\n\n\n    if (this.state.user && this.state.admin) {\n      page = /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          flexGrow: 1\n        },\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          spacing: 2,\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              sx: {\n                fontSize: 30,\n                fontWeight: 500\n              },\n              children: \"Login successful!\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 363,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              sx: {\n                fontSize: 24,\n                fontWeight: 350\n              },\n              children: \"You have been successfully logged! Please enjoy the site!\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 366,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 362,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 4\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 370,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 4,\n            sx: {\n              justifyContent: 'center'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 372,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 4\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 374,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 361,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 360,\n        columnNumber: 17\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: page\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 381,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default LoginRegisterPage;","map":{"version":3,"sources":["C:/Users/Owner/Documents/Github/KV6002EsportsSociety/website/src/components/LoginRegisterPage.js"],"names":["React","FormLogin","FormRegister","jwt_decode","Typography","Grid","Box","LoginRegisterPage","Component","constructor","props","handleEmail","e","setState","email","target","value","handlePassword","password","handlefirstName","userFirst","handlelastName","userLast","handleUserIGN","userign","handleRegisterState","loginpage","registerpage","handleLoginState","handleLoginClick","url","formData","FormData","append","state","fetch","method","headers","Headers","body","then","response","status","json","error","data","results","user","token","localStorage","setItem","catch","err","console","log","handleRegisterClick","registered","admin","bind","componentDidMount","getItem","decodedToken","user_isAdmin","render","errorMessage","page","flexGrow","fontSize","fontWeight","justifyContent"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport FormLogin from \"./FormLogin\";\r\nimport FormRegister from \"./FormRegister\";\r\nimport jwt_decode from \"jwt-decode\";\r\nimport Typography from '@mui/material/Typography';\r\nimport Grid from '@mui/material/Grid';\r\nimport { Box } from \"@mui/system\";\r\n\r\nclass LoginRegisterPage extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            user: false,\r\n            admin: false,\r\n            registered: false,\r\n            registerpage: false,\r\n            token: null,\r\n            email: \"\",\r\n            password: \"\",\r\n            userign: \"\",\r\n            userFirst: \"\",\r\n            userLast: \"\",\r\n            error: \"\",\r\n        }\r\n        this.handleEmail = this.handleEmail.bind(this);\r\n        this.handlePassword = this.handlePassword.bind(this);\r\n        this.handlefirstName = this.handlefirstName.bind(this);\r\n        this.handlelastName = this.handlelastName.bind(this);\r\n        this.handleUserIGN = this.handleUserIGN.bind(this);\r\n        this.handleLoginClick = this.handleLoginClick.bind(this);\r\n        this.handleRegisterClick = this.handleRegisterClick.bind(this);\r\n        this.handleRegisterState = this.handleRegisterState.bind(this);\r\n        this.handleLoginState = this.handleLoginState.bind(this);\r\n    }\r\n\r\n\r\n\r\n\r\n    componentDidMount() {\r\n        if (localStorage.getItem('UserLoginToken')) {\r\n            let decodedToken = jwt_decode(localStorage.getItem(\"UserLoginToken\"))\r\n            this.setState({\r\n                user: true,\r\n                token: localStorage.getItem('myReadingListToken')\r\n            })\r\n            if (decodedToken.user_isAdmin = 1) {\r\n                this.setState({\r\n                    admin: true,\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n    * handleEmail(e)\r\n    * \r\n    * Handles the input and change of text within the email field used with the register and login pages.\r\n    *\r\n    */\r\n\r\n    handleEmail = (e) => {\r\n        this.setState({ email: e.target.value })\r\n    }\r\n\r\n\r\n\r\n    /**\r\n    * handlePassword(e)\r\n    * \r\n    * Handles the input and change of text within the password field used within the register and login pages.\r\n    *\r\n    */\r\n\r\n    handlePassword = (e) => {\r\n        this.setState({ password: e.target.value })\r\n    }\r\n\r\n\r\n    /**\r\n    * handlefirstName(e)\r\n    * \r\n    * Handles the input and change of text within the 'First Name' field used within the register page.\r\n    *\r\n    */\r\n\r\n    handlefirstName = (e) => {\r\n        this.setState({ userFirst: e.target.value })\r\n    }\r\n\r\n\r\n    /**\r\n    * handlelastName(e)\r\n    * \r\n    * Handles the input and change of text within the 'Last Name' field used within the register page.\r\n    *\r\n    */\r\n\r\n    handlelastName = (e) => {\r\n        this.setState({ userLast: e.target.value })\r\n    }\r\n\r\n\r\n    /**\r\n    * handleUserIGN(e)\r\n    * \r\n    * Handles the input and change of text within the 'User IGN' field used within the register page.\r\n    *\r\n    */\r\n\r\n    handleUserIGN = (e) => {\r\n        this.setState({ userign: e.target.value })\r\n    }\r\n\r\n    /**\r\n    * handleRegisterState()\r\n    * \r\n    * Changes the state of the webpage to display the register form when the user presses the register button on the Login page.\r\n    *\r\n    */\r\n\r\n    handleRegisterState = () => {\r\n        this.setState(\r\n            {\r\n                loginpage: false,\r\n                registerpage: true\r\n            }\r\n        )\r\n    }\r\n\r\n\r\n    /**\r\n    * handleLoginState()\r\n    * \r\n    * Changes the state of the webpage to display the login form when the user presses the login button on the Register page.\r\n    *\r\n    */\r\n\r\n    handleLoginState = () => {\r\n        this.setState(\r\n            {\r\n                loginpage: true,\r\n                registerpage: false\r\n            }\r\n        )\r\n    }\r\n\r\n\r\n    /**\r\n    * handleLoginClick()\r\n    * \r\n    * This functionality is used when the user presses the 'Login' button on the login page, this will first check the form data entered into it\r\n    * - which should the details be correct, the 'user' boolean is updated to true and a token is created to keep the user logged into the website should they leave.\r\n    *\r\n    * In the event the details entered are incorrect, this will be flagged within an error message and prevent the user from logging in.\r\n    * @param [type] $[var]   [Description]\r\n    */\r\n\r\n    handleLoginClick = () => {\r\n        let url = \"http://unn-w18001798.newnumyspace.co.uk/KV6002/Assessment/api/userlogin\"\r\n\r\n        let formData = new FormData();\r\n        formData.append('user_email', this.state.email);\r\n        formData.append('user_password', this.state.password);\r\n\r\n        fetch(url, {\r\n            method: 'POST',\r\n            headers: new Headers(),\r\n            body: formData\r\n        })\r\n            .then((response) => {\r\n                if (response.status === 200) { //If the status code of the webpage is 200, perform the login function from the API.\r\n                    return response.json()\r\n                } else if (response.status === 401) { //If the status code of the webpage is 401, display an error saying the details collected are incorrect.\r\n                    this.setState({ error: \"The email address or password you have entered are not correct, please try again!\" })\r\n                }\r\n            })\r\n\r\n            .then((data) => { //Using the data collected from a successful login, store the data in a Java Web Token to be used on the webpage and set the boolean 'user' to true.\r\n                if (\"token\" in data.results) {\r\n                    this.setState(\r\n                        {\r\n                            user: true,\r\n                            token: data.results.token\r\n                        }\r\n                    )\r\n\r\n                    localStorage.setItem('UserLoginToken', data.results.token); //Store the Token within the Browser's local storage.\r\n                }\r\n            })\r\n            .catch((err) => {\r\n                console.log(\"something went wrong \", err)\r\n            }\r\n            );\r\n    }\r\n\r\n\r\n    /**\r\n    * handleRegisterClick\r\n    * \r\n    * This functionality handles when a user presses the Register button on the Register page. Includes error catches for if form inputs are empty.\r\n    * Will only submit data to the database if all fields are filled and provide the correct data. Upon complete submission, the boolean 'Registered' is updated to be true.\r\n    * This is used to move users to the secondary login page for users to login immediately after registering.\r\n    *\r\n    */\r\n\r\n    handleRegisterClick = () => {\r\n        let url = \"http://unn-w18001798.newnumyspace.co.uk/KV6002/Assessment/api/register\"\r\n\r\n        let formData = new FormData();\r\n        formData.append('user_email', this.state.email);\r\n        formData.append('user_password', this.state.password);\r\n        formData.append('user_ign', this.state.userign);\r\n        formData.append('user_firstName', this.state.userFirst);\r\n        formData.append('user_lastName', this.state.userLast);\r\n        fetch(url, {\r\n            method: 'POST',\r\n            headers: new Headers(),\r\n            body: formData\r\n        })\r\n            .then((response) => {\r\n                if ((response.status === 200) || (response.status === 204)) {\r\n                    this.setState(\r\n                        {\r\n                            registered: true\r\n                        }\r\n                    )\r\n                    return response.json()\r\n                } else if (response.status === 406) {\r\n                    this.setState({ error: \"The email address or password you have entered is not acceptable.\" })\r\n                }\r\n                else if (response.status === 403) {\r\n                    this.setState({ error: \"The email address you have entered already exists, please try another email address.\" })\r\n                }\r\n                if (this.state.email == ' ') {\r\n                    this.setState({ error: \".\" })\r\n                }\r\n            })\r\n            .catch((err) => {\r\n                console.log(\"something went wrong \", err)\r\n            }\r\n            );\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @returns {Page} - Will display the rendered page content based on the conditions required.\r\n     */\r\n\r\n    render() {\r\n        let errorMessage = this.state.error\r\n\r\n        /**\r\n         * Default page presented upon accessing the page, will display standard login page.\r\n         * Is also accessed should a user press the 'Already have an account? Log in here!' link on the register page.\r\n         */\r\n        let page = (\r\n            <Box sx={{ flexGrow: 1 }}>\r\n                <Grid container spacing={2}>\r\n                    <Grid item xs={12}>\r\n                        <Typography sx={{ fontSize: 30, fontWeight: 500 }}>\r\n                            Login\r\n                        </Typography>\r\n                        <Typography sx={{ fontSize: 24, fontWeight: 350 }}>\r\n                            Please enter your details to log into your account!\r\n                        </Typography>\r\n                    </Grid>\r\n                    <Grid item xs={4}>\r\n                    </Grid>\r\n                    <Grid item xs={4} sx={{ justifyContent: 'center' }}>\r\n                        <FormLogin\r\n                            handleEmail={this.handleEmail}\r\n                            handlePassword={this.handlePassword}\r\n                            handleLoginClick={this.handleLoginClick}\r\n                            handleRegisterState={this.handleRegisterState}\r\n                        />\r\n                        <ul><p className=\"errorMessage\">{errorMessage}</p></ul>\r\n                    </Grid>\r\n                    <Grid item xs={4}>\r\n                    </Grid>\r\n                </Grid>\r\n            </Box>\r\n        )\r\n\r\n\r\n        /**\r\n         * The content required for the Register page, will be displayed if user presses the 'Don't have an account? register one here!' link on the Login page.\r\n         */\r\n        if (this.state.registerpage) {\r\n            page = (\r\n                <Box sx={{ flexGrow: 1 }}>\r\n                    <Grid container spacing={2}>\r\n                        <Grid item xs={12}>\r\n                            <Typography sx={{ fontSize: 30, fontWeight: 500 }}>\r\n                                Register\r\n                            </Typography>\r\n                            <Typography sx={{ fontSize: 24, fontWeight: 350 }}>\r\n                                Please enter your details below to register your account!\r\n                            </Typography>\r\n                        </Grid>\r\n                        <Grid item xs={4}>\r\n                        </Grid>\r\n                        <Grid item xs={4} sx={{ justifyContent: 'center' }}>\r\n                            <FormRegister\r\n                                handlefirstName={this.handlefirstName}\r\n                                handlelastName={this.handlelastName}\r\n                                handleUserIGN={this.handleUserIGN}\r\n                                handleEmail={this.handleEmail}\r\n                                handlePassword={this.handlePassword}\r\n                                handleRegisterClick={this.handleRegisterClick}\r\n                                handleLoginState={this.handleLoginState}\r\n                            />\r\n                            <ul><p className=\"errorMessage\">{errorMessage}</p></ul>\r\n                        </Grid>\r\n                        <Grid item xs={4}>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Box>\r\n            )\r\n        }\r\n\r\n        /**\r\n         * Secondary login page content, displayed only when a user performs a successfuly account registration.\r\n         */\r\n        if (this.state.registered) {\r\n            page = (\r\n                <Box sx={{ flexGrow: 1 }}>\r\n                    <Grid container spacing={2}>\r\n                        <Grid item xs={12}>\r\n                            <Typography sx={{ fontSize: 30, fontWeight: 500 }}>\r\n                                Your details have been successfully registered!\r\n                            </Typography>\r\n                            <Typography sx={{ fontSize: 24, fontWeight: 350 }}>\r\n                                Please enter your details below to log into your account!\r\n                            </Typography>\r\n                        </Grid>\r\n                        <Grid item xs={4}>\r\n                        </Grid>\r\n                        <Grid item xs={4} sx={{ justifyContent: 'center' }}>\r\n                            <FormLogin\r\n                                handleEmail={this.handleEmail}\r\n                                handlePassword={this.handlePassword}\r\n                                handleLoginClick={this.handleLoginClick}\r\n                            />\r\n                            <ul><p className=\"errorMessage\">{errorMessage}</p></ul>\r\n                        </Grid>\r\n                        <Grid item xs={4}>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Box>\r\n            )\r\n        }\r\n\r\n        /**\r\n         * Content to be displayed if a user has successfully logged into their account.\r\n         */\r\n        if (this.state.user && this.state.admin) {\r\n            page = (\r\n                <Box sx={{ flexGrow: 1 }}>\r\n                    <Grid container spacing={2}>\r\n                        <Grid item xs={12}>\r\n                            <Typography sx={{ fontSize: 30, fontWeight: 500 }}>\r\n                                Login successful!\r\n                            </Typography>\r\n                            <Typography sx={{ fontSize: 24, fontWeight: 350 }}>\r\n                                You have been successfully logged! Please enjoy the site!\r\n                            </Typography>\r\n                        </Grid>\r\n                        <Grid item xs={4}>\r\n                        </Grid>\r\n                        <Grid item xs={4} sx={{ justifyContent: 'center' }}>\r\n                        </Grid>\r\n                        <Grid item xs={4}>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Box>\r\n            )\r\n        }\r\n        return (\r\n            <div>{page}</div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default LoginRegisterPage;"]},"metadata":{},"sourceType":"module"}